/* 
 * GmodStore
 *
 * Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Everyday.GmodStore.Sdk.Client;
using Everyday.GmodStore.Sdk.Api;
using Everyday.GmodStore.Sdk.Model;

namespace Everyday.GmodStore.Sdk.Test
{
    /// <summary>
    ///  Class for testing UserBadgesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserBadgesApiTests
    {
        private UserBadgesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserBadgesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserBadgesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserBadgesApi
            //Assert.IsInstanceOfType(typeof(UserBadgesApi), instance, "instance is a UserBadgesApi");
        }

        /// <summary>
        /// Test CreateUserBadge
        /// </summary>
        [Test]
        public void CreateUserBadgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BadgeCreateBody body = null;
            //string userId = null;
            //var response = instance.CreateUserBadge(body, userId);
            //Assert.IsInstanceOf<InlineResponse2013> (response, "response is InlineResponse2013");
        }
        /// <summary>
        /// Test DeleteUserBadge
        /// </summary>
        [Test]
        public void DeleteUserBadgeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //long? badgeId = null;
            //instance.DeleteUserBadge(userId, badgeId);
            
        }
        /// <summary>
        /// Test ListUserBadges
        /// </summary>
        [Test]
        public void ListUserBadgesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.ListUserBadges(userId);
            //Assert.IsInstanceOf<InlineResponse20014> (response, "response is InlineResponse20014");
        }
    }

}
