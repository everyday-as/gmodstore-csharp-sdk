/* 
 * GmodStore
 *
 * Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NO.Everyday.GmodStoreSDK.Client.SwaggerDateConverter;

namespace NO.Everyday.GmodStoreSDK.Model
{
    /// <summary>
    /// AddonCouponBody
    /// </summary>
    [DataContract]
        public partial class AddonCouponBody :  IEquatable<AddonCouponBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCouponBody" /> class.
        /// </summary>
        /// <param name="percent">percent (required).</param>
        /// <param name="code">code (required).</param>
        /// <param name="maxUses">maxUses (required).</param>
        /// <param name="expiresAt">Can be maximum of two weeks into the future (required).</param>
        public AddonCouponBody(int? percent = default(int?), string code = default(string), int? maxUses = default(int?), DateTime? expiresAt = default(DateTime?))
        {
            // to ensure "percent" is required (not null)
            if (percent == null)
            {
                throw new InvalidDataException("percent is a required property for AddonCouponBody and cannot be null");
            }
            else
            {
                this.Percent = percent;
            }
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for AddonCouponBody and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "maxUses" is required (not null)
            if (maxUses == null)
            {
                throw new InvalidDataException("maxUses is a required property for AddonCouponBody and cannot be null");
            }
            else
            {
                this.MaxUses = maxUses;
            }
            // to ensure "expiresAt" is required (not null)
            if (expiresAt == null)
            {
                throw new InvalidDataException("expiresAt is a required property for AddonCouponBody and cannot be null");
            }
            else
            {
                this.ExpiresAt = expiresAt;
            }
        }
        
        /// <summary>
        /// Gets or Sets Percent
        /// </summary>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public int? Percent { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets MaxUses
        /// </summary>
        [DataMember(Name="max_uses", EmitDefaultValue=false)]
        public int? MaxUses { get; set; }

        /// <summary>
        /// Can be maximum of two weeks into the future
        /// </summary>
        /// <value>Can be maximum of two weeks into the future</value>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddonCouponBody {\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  MaxUses: ").Append(MaxUses).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddonCouponBody);
        }

        /// <summary>
        /// Returns true if AddonCouponBody instances are equal
        /// </summary>
        /// <param name="input">Instance of AddonCouponBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddonCouponBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.MaxUses == input.MaxUses ||
                    (this.MaxUses != null &&
                    this.MaxUses.Equals(input.MaxUses))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.MaxUses != null)
                    hashCode = hashCode * 59 + this.MaxUses.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
