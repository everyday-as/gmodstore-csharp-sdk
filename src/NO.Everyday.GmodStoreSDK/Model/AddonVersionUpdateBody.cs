/* 
 * GmodStore
 *
 * Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = NO.Everyday.GmodStoreSDK.Client.SwaggerDateConverter;

namespace NO.Everyday.GmodStoreSDK.Model
{
    /// <summary>
    /// AddonVersionUpdateBody
    /// </summary>
    [DataContract]
        public partial class AddonVersionUpdateBody :  IEquatable<AddonVersionUpdateBody>, IValidatableObject
    {
        /// <summary>
        /// This can be a value of stable, beta, alpha, private or demo 
        /// </summary>
        /// <value>This can be a value of stable, beta, alpha, private or demo </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ReleaseTypeEnum
        {
            /// <summary>
            /// Enum Stable for value: stable
            /// </summary>
            [EnumMember(Value = "stable")]
            Stable = 0,
            /// <summary>
            /// Enum Beta for value: beta
            /// </summary>
            [EnumMember(Value = "beta")]
            Beta = 1,
            /// <summary>
            /// Enum Alpha for value: alpha
            /// </summary>
            [EnumMember(Value = "alpha")]
            Alpha = 2,
            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 3,
            /// <summary>
            /// Enum Demo for value: demo
            /// </summary>
            [EnumMember(Value = "demo")]
            Demo = 4        }
        /// <summary>
        /// This can be a value of stable, beta, alpha, private or demo 
        /// </summary>
        /// <value>This can be a value of stable, beta, alpha, private or demo </value>
        [DataMember(Name="release_type", EmitDefaultValue=false)]
        public ReleaseTypeEnum? ReleaseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddonVersionUpdateBody" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="changelog">You can pass in markdown here .</param>
        /// <param name="releaseType">This can be a value of stable, beta, alpha, private or demo .</param>
        public AddonVersionUpdateBody(string name = default(string), string changelog = default(string), ReleaseTypeEnum? releaseType = default(ReleaseTypeEnum?))
        {
            this.Name = name;
            this.Changelog = changelog;
            this.ReleaseType = releaseType;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// You can pass in markdown here 
        /// </summary>
        /// <value>You can pass in markdown here </value>
        [DataMember(Name="changelog", EmitDefaultValue=false)]
        public string Changelog { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddonVersionUpdateBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  ReleaseType: ").Append(ReleaseType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddonVersionUpdateBody);
        }

        /// <summary>
        /// Returns true if AddonVersionUpdateBody instances are equal
        /// </summary>
        /// <param name="input">Instance of AddonVersionUpdateBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddonVersionUpdateBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Changelog == input.Changelog ||
                    (this.Changelog != null &&
                    this.Changelog.Equals(input.Changelog))
                ) && 
                (
                    this.ReleaseType == input.ReleaseType ||
                    (this.ReleaseType != null &&
                    this.ReleaseType.Equals(input.ReleaseType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Changelog != null)
                    hashCode = hashCode * 59 + this.Changelog.GetHashCode();
                if (this.ReleaseType != null)
                    hashCode = hashCode * 59 + this.ReleaseType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
