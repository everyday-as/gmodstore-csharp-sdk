/* 
 * GmodStore
 *
 * Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using NO.Everyday.GmodStoreSDK.Client;
using NO.Everyday.GmodStoreSDK.Model;

namespace NO.Everyday.GmodStoreSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAddonCouponsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Destroy an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns></returns>
        void AddonsAddonIdCouponsCouponIdDelete (long? addonId, long? couponId);

        /// <summary>
        /// Destroy an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddonsAddonIdCouponsCouponIdDeleteWithHttpInfo (long? addonId, long? couponId);
        /// <summary>
        /// Fetch an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 AddonsAddonIdCouponsCouponIdGet (long? addonId, long? couponId, List<string> with = null);

        /// <summary>
        /// Fetch an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> AddonsAddonIdCouponsCouponIdGetWithHttpInfo (long? addonId, long? couponId, List<string> with = null);
        /// <summary>
        /// Update an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 AddonsAddonIdCouponsCouponIdPut (Object body, long? addonId, long? couponId, List<string> with = null);

        /// <summary>
        /// Update an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> AddonsAddonIdCouponsCouponIdPutWithHttpInfo (Object body, long? addonId, long? couponId, List<string> with = null);
        /// <summary>
        /// Fetch all the coupons for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 AddonsAddonIdCouponsGet (long? addonId, List<string> with = null);

        /// <summary>
        /// Fetch all the coupons for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> AddonsAddonIdCouponsGetWithHttpInfo (long? addonId, List<string> with = null);
        /// <summary>
        /// Create an addon coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 AddonsAddonIdCouponsPost (Object body, long? addonId, List<string> with = null);

        /// <summary>
        /// Create an addon coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> AddonsAddonIdCouponsPostWithHttpInfo (Object body, long? addonId, List<string> with = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Destroy an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddonsAddonIdCouponsCouponIdDeleteAsync (long? addonId, long? couponId);

        /// <summary>
        /// Destroy an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddonsAddonIdCouponsCouponIdDeleteAsyncWithHttpInfo (long? addonId, long? couponId);
        /// <summary>
        /// Fetch an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> AddonsAddonIdCouponsCouponIdGetAsync (long? addonId, long? couponId, List<string> with = null);

        /// <summary>
        /// Fetch an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> AddonsAddonIdCouponsCouponIdGetAsyncWithHttpInfo (long? addonId, long? couponId, List<string> with = null);
        /// <summary>
        /// Update an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> AddonsAddonIdCouponsCouponIdPutAsync (Object body, long? addonId, long? couponId, List<string> with = null);

        /// <summary>
        /// Update an addon&#x27;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> AddonsAddonIdCouponsCouponIdPutAsyncWithHttpInfo (Object body, long? addonId, long? couponId, List<string> with = null);
        /// <summary>
        /// Fetch all the coupons for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> AddonsAddonIdCouponsGetAsync (long? addonId, List<string> with = null);

        /// <summary>
        /// Fetch all the coupons for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> AddonsAddonIdCouponsGetAsyncWithHttpInfo (long? addonId, List<string> with = null);
        /// <summary>
        /// Create an addon coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> AddonsAddonIdCouponsPostAsync (Object body, long? addonId, List<string> with = null);

        /// <summary>
        /// Create an addon coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> AddonsAddonIdCouponsPostAsyncWithHttpInfo (Object body, long? addonId, List<string> with = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AddonCouponsApi : IAddonCouponsApi
    {
        private NO.Everyday.GmodStoreSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCouponsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddonCouponsApi(String basePath)
        {
            this.Configuration = new NO.Everyday.GmodStoreSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = NO.Everyday.GmodStoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCouponsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AddonCouponsApi()
        {
            this.Configuration = NO.Everyday.GmodStoreSDK.Client.Configuration.Default;

            ExceptionFactory = NO.Everyday.GmodStoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCouponsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddonCouponsApi(NO.Everyday.GmodStoreSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = NO.Everyday.GmodStoreSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = NO.Everyday.GmodStoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public NO.Everyday.GmodStoreSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public NO.Everyday.GmodStoreSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Destroy an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns></returns>
        public void AddonsAddonIdCouponsCouponIdDelete (long? addonId, long? couponId)
        {
             AddonsAddonIdCouponsCouponIdDeleteWithHttpInfo(addonId, couponId);
        }

        /// <summary>
        /// Destroy an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddonsAddonIdCouponsCouponIdDeleteWithHttpInfo (long? addonId, long? couponId)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdDelete");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdDelete");

            var localVarPath = "/addons/{addon_id}/coupons/{coupon_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (couponId != null) localVarPathParams.Add("coupon_id", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsCouponIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Destroy an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddonsAddonIdCouponsCouponIdDeleteAsync (long? addonId, long? couponId)
        {
             await AddonsAddonIdCouponsCouponIdDeleteAsyncWithHttpInfo(addonId, couponId);

        }

        /// <summary>
        /// Destroy an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddonsAddonIdCouponsCouponIdDeleteAsyncWithHttpInfo (long? addonId, long? couponId)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdDelete");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdDelete");

            var localVarPath = "/addons/{addon_id}/coupons/{coupon_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (couponId != null) localVarPathParams.Add("coupon_id", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsCouponIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Fetch an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 AddonsAddonIdCouponsCouponIdGet (long? addonId, long? couponId, List<string> with = null)
        {
             ApiResponse<InlineResponse201> localVarResponse = AddonsAddonIdCouponsCouponIdGetWithHttpInfo(addonId, couponId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > AddonsAddonIdCouponsCouponIdGetWithHttpInfo (long? addonId, long? couponId, List<string> with = null)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdGet");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdGet");

            var localVarPath = "/addons/{addon_id}/coupons/{coupon_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (couponId != null) localVarPathParams.Add("coupon_id", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsCouponIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Fetch an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> AddonsAddonIdCouponsCouponIdGetAsync (long? addonId, long? couponId, List<string> with = null)
        {
             ApiResponse<InlineResponse201> localVarResponse = await AddonsAddonIdCouponsCouponIdGetAsyncWithHttpInfo(addonId, couponId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> AddonsAddonIdCouponsCouponIdGetAsyncWithHttpInfo (long? addonId, long? couponId, List<string> with = null)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdGet");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdGet");

            var localVarPath = "/addons/{addon_id}/coupons/{coupon_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (couponId != null) localVarPathParams.Add("coupon_id", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsCouponIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Update an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 AddonsAddonIdCouponsCouponIdPut (Object body, long? addonId, long? couponId, List<string> with = null)
        {
             ApiResponse<InlineResponse201> localVarResponse = AddonsAddonIdCouponsCouponIdPutWithHttpInfo(body, addonId, couponId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > AddonsAddonIdCouponsCouponIdPutWithHttpInfo (Object body, long? addonId, long? couponId, List<string> with = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdPut");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdPut");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdPut");

            var localVarPath = "/addons/{addon_id}/coupons/{coupon_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (couponId != null) localVarPathParams.Add("coupon_id", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsCouponIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Update an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> AddonsAddonIdCouponsCouponIdPutAsync (Object body, long? addonId, long? couponId, List<string> with = null)
        {
             ApiResponse<InlineResponse201> localVarResponse = await AddonsAddonIdCouponsCouponIdPutAsyncWithHttpInfo(body, addonId, couponId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an addon&#x27;s coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> AddonsAddonIdCouponsCouponIdPutAsyncWithHttpInfo (Object body, long? addonId, long? couponId, List<string> with = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdPut");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdPut");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling AddonCouponsApi->AddonsAddonIdCouponsCouponIdPut");

            var localVarPath = "/addons/{addon_id}/coupons/{coupon_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (couponId != null) localVarPathParams.Add("coupon_id", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsCouponIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Fetch all the coupons for an addon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 AddonsAddonIdCouponsGet (long? addonId, List<string> with = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = AddonsAddonIdCouponsGetWithHttpInfo(addonId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all the coupons for an addon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > AddonsAddonIdCouponsGetWithHttpInfo (long? addonId, List<string> with = null)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsGet");

            var localVarPath = "/addons/{addon_id}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Fetch all the coupons for an addon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> AddonsAddonIdCouponsGetAsync (long? addonId, List<string> with = null)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await AddonsAddonIdCouponsGetAsyncWithHttpInfo(addonId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all the coupons for an addon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> AddonsAddonIdCouponsGetAsyncWithHttpInfo (long? addonId, List<string> with = null)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsGet");

            var localVarPath = "/addons/{addon_id}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Create an addon coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 AddonsAddonIdCouponsPost (Object body, long? addonId, List<string> with = null)
        {
             ApiResponse<InlineResponse201> localVarResponse = AddonsAddonIdCouponsPostWithHttpInfo(body, addonId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an addon coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > AddonsAddonIdCouponsPostWithHttpInfo (Object body, long? addonId, List<string> with = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddonCouponsApi->AddonsAddonIdCouponsPost");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsPost");

            var localVarPath = "/addons/{addon_id}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Create an addon coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> AddonsAddonIdCouponsPostAsync (Object body, long? addonId, List<string> with = null)
        {
             ApiResponse<InlineResponse201> localVarResponse = await AddonsAddonIdCouponsPostAsyncWithHttpInfo(body, addonId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an addon coupon 
        /// </summary>
        /// <exception cref="NO.Everyday.GmodStoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the AddonCoupon schema (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> AddonsAddonIdCouponsPostAsyncWithHttpInfo (Object body, long? addonId, List<string> with = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AddonCouponsApi->AddonsAddonIdCouponsPost");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonCouponsApi->AddonsAddonIdCouponsPost");

            var localVarPath = "/addons/{addon_id}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddonsAddonIdCouponsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

    }
}
