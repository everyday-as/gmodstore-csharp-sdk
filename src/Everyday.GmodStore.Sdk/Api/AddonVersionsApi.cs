/* 
 * GmodStore
 *
 * Welcome to the Gmodstore API! You can use our API to access Gmodstore API endpoints, which can be used interact with Gmodstore programmatically.
 *
 * OpenAPI spec version: 1.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Everyday.GmodStore.Sdk.Client;
using Everyday.GmodStore.Sdk.Model;

namespace Everyday.GmodStore.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAddonVersionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new version for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="_file"></param>
        /// <param name="releaseType"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        AddonVersionResponse CreateAddonVersion (string name, string changelog, byte[] _file, AddonVersionReleaseType releaseType, long? addonId, List<string> with = null);

        /// <summary>
        /// Create a new version for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="_file"></param>
        /// <param name="releaseType"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        ApiResponse<AddonVersionResponse> CreateAddonVersionWithHttpInfo (string name, string changelog, byte[] _file, AddonVersionReleaseType releaseType, long? addonId, List<string> with = null);
        /// <summary>
        /// Generate a download token for a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>AddonDownloadResponse</returns>
        AddonDownloadResponse DownloadAddonVersion (long? addonId, long? versionId);

        /// <summary>
        /// Generate a download token for a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>ApiResponse of AddonDownloadResponse</returns>
        ApiResponse<AddonDownloadResponse> DownloadAddonVersionWithHttpInfo (long? addonId, long? versionId);
        /// <summary>
        /// Fetch a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        AddonVersionResponse GetAddonVersion (long? addonId, long? versionId, List<string> with = null);

        /// <summary>
        /// Fetch a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        ApiResponse<AddonVersionResponse> GetAddonVersionWithHttpInfo (long? addonId, long? versionId, List<string> with = null);
        /// <summary>
        /// Fetch all the versions of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionListResponse</returns>
        AddonVersionListResponse ListAddonVersions (long? addonId, List<string> with = null);

        /// <summary>
        /// Fetch all the versions of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionListResponse</returns>
        ApiResponse<AddonVersionListResponse> ListAddonVersionsWithHttpInfo (long? addonId, List<string> with = null);
        /// <summary>
        /// Update a version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="fileHash"></param>
        /// <param name="fileSize"></param>
        /// <param name="releaseType"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="addon"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        AddonVersionResponse UpdateAddonVersion (int? id, string name, string changelog, string fileHash, int? fileSize, AddonVersionReleaseType releaseType, DateTime? createdAt, DateTime? updatedAt, Addon addon, long? addonId, long? versionId, List<string> with = null);

        /// <summary>
        /// Update a version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="fileHash"></param>
        /// <param name="fileSize"></param>
        /// <param name="releaseType"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="addon"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        ApiResponse<AddonVersionResponse> UpdateAddonVersionWithHttpInfo (int? id, string name, string changelog, string fileHash, int? fileSize, AddonVersionReleaseType releaseType, DateTime? createdAt, DateTime? updatedAt, Addon addon, long? addonId, long? versionId, List<string> with = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new version for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="_file"></param>
        /// <param name="releaseType"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        System.Threading.Tasks.Task<AddonVersionResponse> CreateAddonVersionAsync (string name, string changelog, byte[] _file, AddonVersionReleaseType releaseType, long? addonId, List<string> with = null);

        /// <summary>
        /// Create a new version for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="_file"></param>
        /// <param name="releaseType"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> CreateAddonVersionAsyncWithHttpInfo (string name, string changelog, byte[] _file, AddonVersionReleaseType releaseType, long? addonId, List<string> with = null);
        /// <summary>
        /// Generate a download token for a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>Task of AddonDownloadResponse</returns>
        System.Threading.Tasks.Task<AddonDownloadResponse> DownloadAddonVersionAsync (long? addonId, long? versionId);

        /// <summary>
        /// Generate a download token for a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>Task of ApiResponse (AddonDownloadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonDownloadResponse>> DownloadAddonVersionAsyncWithHttpInfo (long? addonId, long? versionId);
        /// <summary>
        /// Fetch a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        System.Threading.Tasks.Task<AddonVersionResponse> GetAddonVersionAsync (long? addonId, long? versionId, List<string> with = null);

        /// <summary>
        /// Fetch a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> GetAddonVersionAsyncWithHttpInfo (long? addonId, long? versionId, List<string> with = null);
        /// <summary>
        /// Fetch all the versions of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionListResponse</returns>
        System.Threading.Tasks.Task<AddonVersionListResponse> ListAddonVersionsAsync (long? addonId, List<string> with = null);

        /// <summary>
        /// Fetch all the versions of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonVersionListResponse>> ListAddonVersionsAsyncWithHttpInfo (long? addonId, List<string> with = null);
        /// <summary>
        /// Update a version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="fileHash"></param>
        /// <param name="fileSize"></param>
        /// <param name="releaseType"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="addon"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        System.Threading.Tasks.Task<AddonVersionResponse> UpdateAddonVersionAsync (int? id, string name, string changelog, string fileHash, int? fileSize, AddonVersionReleaseType releaseType, DateTime? createdAt, DateTime? updatedAt, Addon addon, long? addonId, long? versionId, List<string> with = null);

        /// <summary>
        /// Update a version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="fileHash"></param>
        /// <param name="fileSize"></param>
        /// <param name="releaseType"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="addon"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> UpdateAddonVersionAsyncWithHttpInfo (int? id, string name, string changelog, string fileHash, int? fileSize, AddonVersionReleaseType releaseType, DateTime? createdAt, DateTime? updatedAt, Addon addon, long? addonId, long? versionId, List<string> with = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AddonVersionsApi : IAddonVersionsApi
    {
        private Everyday.GmodStore.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddonVersionsApi(String basePath)
        {
            this.Configuration = new Everyday.GmodStore.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonVersionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AddonVersionsApi()
        {
            this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.Default;

            ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonVersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddonVersionsApi(Everyday.GmodStore.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Everyday.GmodStore.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new version for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="_file"></param>
        /// <param name="releaseType"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        public AddonVersionResponse CreateAddonVersion (string name, string changelog, byte[] _file, AddonVersionReleaseType releaseType, long? addonId, List<string> with = null)
        {
             ApiResponse<AddonVersionResponse> localVarResponse = CreateAddonVersionWithHttpInfo(name, changelog, _file, releaseType, addonId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new version for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="_file"></param>
        /// <param name="releaseType"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        public ApiResponse< AddonVersionResponse > CreateAddonVersionWithHttpInfo (string name, string changelog, byte[] _file, AddonVersionReleaseType releaseType, long? addonId, List<string> with = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AddonVersionsApi->CreateAddonVersion");
            // verify the required parameter 'changelog' is set
            if (changelog == null)
                throw new ApiException(400, "Missing required parameter 'changelog' when calling AddonVersionsApi->CreateAddonVersion");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling AddonVersionsApi->CreateAddonVersion");
            // verify the required parameter 'releaseType' is set
            if (releaseType == null)
                throw new ApiException(400, "Missing required parameter 'releaseType' when calling AddonVersionsApi->CreateAddonVersion");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->CreateAddonVersion");

            var localVarPath = "/addons/{addon_id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (changelog != null) localVarFormParams.Add("changelog", this.Configuration.ApiClient.ParameterToString(changelog)); // form parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (releaseType != null) localVarFormParams.Add("release_type", this.Configuration.ApiClient.ParameterToString(releaseType)); // form parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAddonVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonVersionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonVersionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonVersionResponse)));
        }

        /// <summary>
        /// Create a new version for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="_file"></param>
        /// <param name="releaseType"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        public async System.Threading.Tasks.Task<AddonVersionResponse> CreateAddonVersionAsync (string name, string changelog, byte[] _file, AddonVersionReleaseType releaseType, long? addonId, List<string> with = null)
        {
             ApiResponse<AddonVersionResponse> localVarResponse = await CreateAddonVersionAsyncWithHttpInfo(name, changelog, _file, releaseType, addonId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new version for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="_file"></param>
        /// <param name="releaseType"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> CreateAddonVersionAsyncWithHttpInfo (string name, string changelog, byte[] _file, AddonVersionReleaseType releaseType, long? addonId, List<string> with = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AddonVersionsApi->CreateAddonVersion");
            // verify the required parameter 'changelog' is set
            if (changelog == null)
                throw new ApiException(400, "Missing required parameter 'changelog' when calling AddonVersionsApi->CreateAddonVersion");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling AddonVersionsApi->CreateAddonVersion");
            // verify the required parameter 'releaseType' is set
            if (releaseType == null)
                throw new ApiException(400, "Missing required parameter 'releaseType' when calling AddonVersionsApi->CreateAddonVersion");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->CreateAddonVersion");

            var localVarPath = "/addons/{addon_id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (changelog != null) localVarFormParams.Add("changelog", this.Configuration.ApiClient.ParameterToString(changelog)); // form parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));
            if (releaseType != null) localVarFormParams.Add("release_type", this.Configuration.ApiClient.ParameterToString(releaseType)); // form parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAddonVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonVersionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonVersionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonVersionResponse)));
        }

        /// <summary>
        /// Generate a download token for a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>AddonDownloadResponse</returns>
        public AddonDownloadResponse DownloadAddonVersion (long? addonId, long? versionId)
        {
             ApiResponse<AddonDownloadResponse> localVarResponse = DownloadAddonVersionWithHttpInfo(addonId, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a download token for a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>ApiResponse of AddonDownloadResponse</returns>
        public ApiResponse< AddonDownloadResponse > DownloadAddonVersionWithHttpInfo (long? addonId, long? versionId)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->DownloadAddonVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling AddonVersionsApi->DownloadAddonVersion");

            var localVarPath = "/addons/{addon_id}/versions/{version_id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAddonVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonDownloadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonDownloadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonDownloadResponse)));
        }

        /// <summary>
        /// Generate a download token for a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>Task of AddonDownloadResponse</returns>
        public async System.Threading.Tasks.Task<AddonDownloadResponse> DownloadAddonVersionAsync (long? addonId, long? versionId)
        {
             ApiResponse<AddonDownloadResponse> localVarResponse = await DownloadAddonVersionAsyncWithHttpInfo(addonId, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a download token for a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>Task of ApiResponse (AddonDownloadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddonDownloadResponse>> DownloadAddonVersionAsyncWithHttpInfo (long? addonId, long? versionId)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->DownloadAddonVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling AddonVersionsApi->DownloadAddonVersion");

            var localVarPath = "/addons/{addon_id}/versions/{version_id}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadAddonVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonDownloadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonDownloadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonDownloadResponse)));
        }

        /// <summary>
        /// Fetch a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        public AddonVersionResponse GetAddonVersion (long? addonId, long? versionId, List<string> with = null)
        {
             ApiResponse<AddonVersionResponse> localVarResponse = GetAddonVersionWithHttpInfo(addonId, versionId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        public ApiResponse< AddonVersionResponse > GetAddonVersionWithHttpInfo (long? addonId, long? versionId, List<string> with = null)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->GetAddonVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling AddonVersionsApi->GetAddonVersion");

            var localVarPath = "/addons/{addon_id}/versions/{version_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddonVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonVersionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonVersionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonVersionResponse)));
        }

        /// <summary>
        /// Fetch a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        public async System.Threading.Tasks.Task<AddonVersionResponse> GetAddonVersionAsync (long? addonId, long? versionId, List<string> with = null)
        {
             ApiResponse<AddonVersionResponse> localVarResponse = await GetAddonVersionAsyncWithHttpInfo(addonId, versionId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> GetAddonVersionAsyncWithHttpInfo (long? addonId, long? versionId, List<string> with = null)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->GetAddonVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling AddonVersionsApi->GetAddonVersion");

            var localVarPath = "/addons/{addon_id}/versions/{version_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddonVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonVersionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonVersionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonVersionResponse)));
        }

        /// <summary>
        /// Fetch all the versions of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionListResponse</returns>
        public AddonVersionListResponse ListAddonVersions (long? addonId, List<string> with = null)
        {
             ApiResponse<AddonVersionListResponse> localVarResponse = ListAddonVersionsWithHttpInfo(addonId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all the versions of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionListResponse</returns>
        public ApiResponse< AddonVersionListResponse > ListAddonVersionsWithHttpInfo (long? addonId, List<string> with = null)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->ListAddonVersions");

            var localVarPath = "/addons/{addon_id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAddonVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonVersionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonVersionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonVersionListResponse)));
        }

        /// <summary>
        /// Fetch all the versions of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionListResponse</returns>
        public async System.Threading.Tasks.Task<AddonVersionListResponse> ListAddonVersionsAsync (long? addonId, List<string> with = null)
        {
             ApiResponse<AddonVersionListResponse> localVarResponse = await ListAddonVersionsAsyncWithHttpInfo(addonId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all the versions of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddonVersionListResponse>> ListAddonVersionsAsyncWithHttpInfo (long? addonId, List<string> with = null)
        {
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->ListAddonVersions");

            var localVarPath = "/addons/{addon_id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAddonVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonVersionListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonVersionListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonVersionListResponse)));
        }

        /// <summary>
        /// Update a version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="fileHash"></param>
        /// <param name="fileSize"></param>
        /// <param name="releaseType"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="addon"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        public AddonVersionResponse UpdateAddonVersion (int? id, string name, string changelog, string fileHash, int? fileSize, AddonVersionReleaseType releaseType, DateTime? createdAt, DateTime? updatedAt, Addon addon, long? addonId, long? versionId, List<string> with = null)
        {
             ApiResponse<AddonVersionResponse> localVarResponse = UpdateAddonVersionWithHttpInfo(id, name, changelog, fileHash, fileSize, releaseType, createdAt, updatedAt, addon, addonId, versionId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="fileHash"></param>
        /// <param name="fileSize"></param>
        /// <param name="releaseType"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="addon"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        public ApiResponse< AddonVersionResponse > UpdateAddonVersionWithHttpInfo (int? id, string name, string changelog, string fileHash, int? fileSize, AddonVersionReleaseType releaseType, DateTime? createdAt, DateTime? updatedAt, Addon addon, long? addonId, long? versionId, List<string> with = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'changelog' is set
            if (changelog == null)
                throw new ApiException(400, "Missing required parameter 'changelog' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'fileHash' is set
            if (fileHash == null)
                throw new ApiException(400, "Missing required parameter 'fileHash' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'fileSize' is set
            if (fileSize == null)
                throw new ApiException(400, "Missing required parameter 'fileSize' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'releaseType' is set
            if (releaseType == null)
                throw new ApiException(400, "Missing required parameter 'releaseType' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'createdAt' is set
            if (createdAt == null)
                throw new ApiException(400, "Missing required parameter 'createdAt' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'updatedAt' is set
            if (updatedAt == null)
                throw new ApiException(400, "Missing required parameter 'updatedAt' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'addon' is set
            if (addon == null)
                throw new ApiException(400, "Missing required parameter 'addon' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling AddonVersionsApi->UpdateAddonVersion");

            var localVarPath = "/addons/{addon_id}/versions/{version_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (changelog != null) localVarFormParams.Add("changelog", this.Configuration.ApiClient.ParameterToString(changelog)); // form parameter
            if (fileHash != null) localVarFormParams.Add("file_hash", this.Configuration.ApiClient.ParameterToString(fileHash)); // form parameter
            if (fileSize != null) localVarFormParams.Add("file_size", this.Configuration.ApiClient.ParameterToString(fileSize)); // form parameter
            if (releaseType != null) localVarFormParams.Add("release_type", this.Configuration.ApiClient.ParameterToString(releaseType)); // form parameter
            if (createdAt != null) localVarFormParams.Add("created_at", this.Configuration.ApiClient.ParameterToString(createdAt)); // form parameter
            if (updatedAt != null) localVarFormParams.Add("updated_at", this.Configuration.ApiClient.ParameterToString(updatedAt)); // form parameter
            if (addon != null) localVarFormParams.Add("addon", this.Configuration.ApiClient.ParameterToString(addon)); // form parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAddonVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonVersionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonVersionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonVersionResponse)));
        }

        /// <summary>
        /// Update a version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="fileHash"></param>
        /// <param name="fileSize"></param>
        /// <param name="releaseType"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="addon"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        public async System.Threading.Tasks.Task<AddonVersionResponse> UpdateAddonVersionAsync (int? id, string name, string changelog, string fileHash, int? fileSize, AddonVersionReleaseType releaseType, DateTime? createdAt, DateTime? updatedAt, Addon addon, long? addonId, long? versionId, List<string> with = null)
        {
             ApiResponse<AddonVersionResponse> localVarResponse = await UpdateAddonVersionAsyncWithHttpInfo(id, name, changelog, fileHash, fileSize, releaseType, createdAt, updatedAt, addon, addonId, versionId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="fileHash"></param>
        /// <param name="fileSize"></param>
        /// <param name="releaseType"></param>
        /// <param name="createdAt"></param>
        /// <param name="updatedAt"></param>
        /// <param name="addon"></param>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> UpdateAddonVersionAsyncWithHttpInfo (int? id, string name, string changelog, string fileHash, int? fileSize, AddonVersionReleaseType releaseType, DateTime? createdAt, DateTime? updatedAt, Addon addon, long? addonId, long? versionId, List<string> with = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'changelog' is set
            if (changelog == null)
                throw new ApiException(400, "Missing required parameter 'changelog' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'fileHash' is set
            if (fileHash == null)
                throw new ApiException(400, "Missing required parameter 'fileHash' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'fileSize' is set
            if (fileSize == null)
                throw new ApiException(400, "Missing required parameter 'fileSize' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'releaseType' is set
            if (releaseType == null)
                throw new ApiException(400, "Missing required parameter 'releaseType' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'createdAt' is set
            if (createdAt == null)
                throw new ApiException(400, "Missing required parameter 'createdAt' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'updatedAt' is set
            if (updatedAt == null)
                throw new ApiException(400, "Missing required parameter 'updatedAt' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'addon' is set
            if (addon == null)
                throw new ApiException(400, "Missing required parameter 'addon' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'addonId' is set
            if (addonId == null)
                throw new ApiException(400, "Missing required parameter 'addonId' when calling AddonVersionsApi->UpdateAddonVersion");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling AddonVersionsApi->UpdateAddonVersion");

            var localVarPath = "/addons/{addon_id}/versions/{version_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addonId != null) localVarPathParams.Add("addon_id", this.Configuration.ApiClient.ParameterToString(addonId)); // path parameter
            if (versionId != null) localVarPathParams.Add("version_id", this.Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "with", with)); // query parameter
            if (id != null) localVarFormParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (changelog != null) localVarFormParams.Add("changelog", this.Configuration.ApiClient.ParameterToString(changelog)); // form parameter
            if (fileHash != null) localVarFormParams.Add("file_hash", this.Configuration.ApiClient.ParameterToString(fileHash)); // form parameter
            if (fileSize != null) localVarFormParams.Add("file_size", this.Configuration.ApiClient.ParameterToString(fileSize)); // form parameter
            if (releaseType != null) localVarFormParams.Add("release_type", this.Configuration.ApiClient.ParameterToString(releaseType)); // form parameter
            if (createdAt != null) localVarFormParams.Add("created_at", this.Configuration.ApiClient.ParameterToString(createdAt)); // form parameter
            if (updatedAt != null) localVarFormParams.Add("updated_at", this.Configuration.ApiClient.ParameterToString(updatedAt)); // form parameter
            if (addon != null) localVarFormParams.Add("addon", this.Configuration.ApiClient.ParameterToString(addon)); // form parameter
            // authentication (bearerAuth) required

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAddonVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddonVersionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AddonVersionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddonVersionResponse)));
        }

    }
}
