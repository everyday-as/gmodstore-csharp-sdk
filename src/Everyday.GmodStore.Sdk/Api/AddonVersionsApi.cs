/* 
 * GmodStore API
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Everyday.GmodStore.Sdk.Client;
using Everyday.GmodStore.Sdk.Model;

namespace Everyday.GmodStore.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddonVersionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new version for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="newAddonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        AddonVersionResponse CreateAddonVersion (long addonId, NewAddonVersion newAddonVersion, List<string> with = default(List<string>));

        /// <summary>
        /// Create a new version for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="newAddonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        ApiResponse<AddonVersionResponse> CreateAddonVersionWithHttpInfo (long addonId, NewAddonVersion newAddonVersion, List<string> with = default(List<string>));
        /// <summary>
        /// Generate a download token for a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>AddonDownloadResponse</returns>
        AddonDownloadResponse DownloadAddonVersion (long addonId, long versionId);

        /// <summary>
        /// Generate a download token for a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>ApiResponse of AddonDownloadResponse</returns>
        ApiResponse<AddonDownloadResponse> DownloadAddonVersionWithHttpInfo (long addonId, long versionId);
        /// <summary>
        /// Fetch a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        AddonVersionResponse GetAddonVersion (long addonId, long versionId, List<string> with = default(List<string>));

        /// <summary>
        /// Fetch a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        ApiResponse<AddonVersionResponse> GetAddonVersionWithHttpInfo (long addonId, long versionId, List<string> with = default(List<string>));
        /// <summary>
        /// Fetch all the versions of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionListResponse</returns>
        AddonVersionListResponse ListAddonVersions (long addonId, List<string> with = default(List<string>));

        /// <summary>
        /// Fetch all the versions of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionListResponse</returns>
        ApiResponse<AddonVersionListResponse> ListAddonVersionsWithHttpInfo (long addonId, List<string> with = default(List<string>));
        /// <summary>
        /// Update a version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="addonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        AddonVersionResponse UpdateAddonVersion (long addonId, long versionId, AddonVersion addonVersion, List<string> with = default(List<string>));

        /// <summary>
        /// Update a version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="addonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        ApiResponse<AddonVersionResponse> UpdateAddonVersionWithHttpInfo (long addonId, long versionId, AddonVersion addonVersion, List<string> with = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddonVersionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new version for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="newAddonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        System.Threading.Tasks.Task<AddonVersionResponse> CreateAddonVersionAsync (long addonId, NewAddonVersion newAddonVersion, List<string> with = default(List<string>));

        /// <summary>
        /// Create a new version for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="newAddonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> CreateAddonVersionAsyncWithHttpInfo (long addonId, NewAddonVersion newAddonVersion, List<string> with = default(List<string>));
        /// <summary>
        /// Generate a download token for a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>Task of AddonDownloadResponse</returns>
        System.Threading.Tasks.Task<AddonDownloadResponse> DownloadAddonVersionAsync (long addonId, long versionId);

        /// <summary>
        /// Generate a download token for a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>Task of ApiResponse (AddonDownloadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonDownloadResponse>> DownloadAddonVersionAsyncWithHttpInfo (long addonId, long versionId);
        /// <summary>
        /// Fetch a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        System.Threading.Tasks.Task<AddonVersionResponse> GetAddonVersionAsync (long addonId, long versionId, List<string> with = default(List<string>));

        /// <summary>
        /// Fetch a specific version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> GetAddonVersionAsyncWithHttpInfo (long addonId, long versionId, List<string> with = default(List<string>));
        /// <summary>
        /// Fetch all the versions of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionListResponse</returns>
        System.Threading.Tasks.Task<AddonVersionListResponse> ListAddonVersionsAsync (long addonId, List<string> with = default(List<string>));

        /// <summary>
        /// Fetch all the versions of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonVersionListResponse>> ListAddonVersionsAsyncWithHttpInfo (long addonId, List<string> with = default(List<string>));
        /// <summary>
        /// Update a version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="addonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        System.Threading.Tasks.Task<AddonVersionResponse> UpdateAddonVersionAsync (long addonId, long versionId, AddonVersion addonVersion, List<string> with = default(List<string>));

        /// <summary>
        /// Update a version of an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="addonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonVersionResponse>> UpdateAddonVersionAsyncWithHttpInfo (long addonId, long versionId, AddonVersion addonVersion, List<string> with = default(List<string>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddonVersionsApi : IAddonVersionsApiSync, IAddonVersionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddonVersionsApi : IAddonVersionsApi
    {
        private Everyday.GmodStore.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddonVersionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddonVersionsApi(String basePath)
        {
            this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.MergeConfigurations(
                Everyday.GmodStore.Sdk.Client.GlobalConfiguration.Instance,
                new Everyday.GmodStore.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonVersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddonVersionsApi(Everyday.GmodStore.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.MergeConfigurations(
                Everyday.GmodStore.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonVersionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AddonVersionsApi(Everyday.GmodStore.Sdk.Client.ISynchronousClient client,Everyday.GmodStore.Sdk.Client.IAsynchronousClient asyncClient, Everyday.GmodStore.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Everyday.GmodStore.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new version for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="newAddonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        public AddonVersionResponse CreateAddonVersion (long addonId, NewAddonVersion newAddonVersion, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse> localVarResponse = CreateAddonVersionWithHttpInfo(addonId, newAddonVersion, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new version for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="newAddonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonVersionResponse > CreateAddonVersionWithHttpInfo (long addonId, NewAddonVersion newAddonVersion, List<string> with = default(List<string>))
        {
            // verify the required parameter 'newAddonVersion' is set
            if (newAddonVersion == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'newAddonVersion' when calling AddonVersionsApi->CreateAddonVersion");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }
            localVarRequestOptions.Data = newAddonVersion;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AddonVersionResponse >("/addons/{addon_id}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAddonVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new version for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="newAddonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        public async System.Threading.Tasks.Task<AddonVersionResponse> CreateAddonVersionAsync (long addonId, NewAddonVersion newAddonVersion, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse> localVarResponse = await CreateAddonVersionAsyncWithHttpInfo(addonId, newAddonVersion, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new version for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="newAddonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse>> CreateAddonVersionAsyncWithHttpInfo (long addonId, NewAddonVersion newAddonVersion, List<string> with = default(List<string>))
        {
            // verify the required parameter 'newAddonVersion' is set
            if (newAddonVersion == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'newAddonVersion' when calling AddonVersionsApi->CreateAddonVersion");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }
            localVarRequestOptions.Data = newAddonVersion;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddonVersionResponse>("/addons/{addon_id}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAddonVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a download token for a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>AddonDownloadResponse</returns>
        public AddonDownloadResponse DownloadAddonVersion (long addonId, long versionId)
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonDownloadResponse> localVarResponse = DownloadAddonVersionWithHttpInfo(addonId, versionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a download token for a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>ApiResponse of AddonDownloadResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonDownloadResponse > DownloadAddonVersionWithHttpInfo (long addonId, long versionId)
        {
            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("version_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AddonDownloadResponse >("/addons/{addon_id}/versions/{version_id}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAddonVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate a download token for a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>Task of AddonDownloadResponse</returns>
        public async System.Threading.Tasks.Task<AddonDownloadResponse> DownloadAddonVersionAsync (long addonId, long versionId)
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonDownloadResponse> localVarResponse = await DownloadAddonVersionAsyncWithHttpInfo(addonId, versionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a download token for a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <returns>Task of ApiResponse (AddonDownloadResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonDownloadResponse>> DownloadAddonVersionAsyncWithHttpInfo (long addonId, long versionId)
        {

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("version_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AddonDownloadResponse>("/addons/{addon_id}/versions/{version_id}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadAddonVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        public AddonVersionResponse GetAddonVersion (long addonId, long versionId, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse> localVarResponse = GetAddonVersionWithHttpInfo(addonId, versionId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonVersionResponse > GetAddonVersionWithHttpInfo (long addonId, long versionId, List<string> with = default(List<string>))
        {
            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("version_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AddonVersionResponse >("/addons/{addon_id}/versions/{version_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAddonVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        public async System.Threading.Tasks.Task<AddonVersionResponse> GetAddonVersionAsync (long addonId, long versionId, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse> localVarResponse = await GetAddonVersionAsyncWithHttpInfo(addonId, versionId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch a specific version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse>> GetAddonVersionAsyncWithHttpInfo (long addonId, long versionId, List<string> with = default(List<string>))
        {

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("version_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AddonVersionResponse>("/addons/{addon_id}/versions/{version_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAddonVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch all the versions of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionListResponse</returns>
        public AddonVersionListResponse ListAddonVersions (long addonId, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionListResponse> localVarResponse = ListAddonVersionsWithHttpInfo(addonId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all the versions of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionListResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonVersionListResponse > ListAddonVersionsWithHttpInfo (long addonId, List<string> with = default(List<string>))
        {
            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AddonVersionListResponse >("/addons/{addon_id}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAddonVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch all the versions of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionListResponse</returns>
        public async System.Threading.Tasks.Task<AddonVersionListResponse> ListAddonVersionsAsync (long addonId, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionListResponse> localVarResponse = await ListAddonVersionsAsyncWithHttpInfo(addonId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all the versions of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionListResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionListResponse>> ListAddonVersionsAsyncWithHttpInfo (long addonId, List<string> with = default(List<string>))
        {

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AddonVersionListResponse>("/addons/{addon_id}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAddonVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="addonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>AddonVersionResponse</returns>
        public AddonVersionResponse UpdateAddonVersion (long addonId, long versionId, AddonVersion addonVersion, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse> localVarResponse = UpdateAddonVersionWithHttpInfo(addonId, versionId, addonVersion, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="addonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonVersionResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonVersionResponse > UpdateAddonVersionWithHttpInfo (long addonId, long versionId, AddonVersion addonVersion, List<string> with = default(List<string>))
        {
            // verify the required parameter 'addonVersion' is set
            if (addonVersion == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'addonVersion' when calling AddonVersionsApi->UpdateAddonVersion");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("version_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }
            localVarRequestOptions.Data = addonVersion;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AddonVersionResponse >("/addons/{addon_id}/versions/{version_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAddonVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="addonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of AddonVersionResponse</returns>
        public async System.Threading.Tasks.Task<AddonVersionResponse> UpdateAddonVersionAsync (long addonId, long versionId, AddonVersion addonVersion, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse> localVarResponse = await UpdateAddonVersionAsyncWithHttpInfo(addonId, versionId, addonVersion, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a version of an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="versionId">Id of the version</param>
        /// <param name="addonVersion"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonVersion&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonVersionResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonVersionResponse>> UpdateAddonVersionAsyncWithHttpInfo (long addonId, long versionId, AddonVersion addonVersion, List<string> with = default(List<string>))
        {
            // verify the required parameter 'addonVersion' is set
            if (addonVersion == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'addonVersion' when calling AddonVersionsApi->UpdateAddonVersion");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("version_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }
            localVarRequestOptions.Data = addonVersion;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AddonVersionResponse>("/addons/{addon_id}/versions/{version_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAddonVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
