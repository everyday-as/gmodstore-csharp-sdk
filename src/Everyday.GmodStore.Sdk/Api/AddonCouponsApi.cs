/* 
 * GmodStore API
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Everyday.GmodStore.Sdk.Client;
using Everyday.GmodStore.Sdk.Model;

namespace Everyday.GmodStore.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddonCouponsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an addon coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>AddonCouponResponse</returns>
        AddonCouponResponse CreateAddonCoupon (long addonId, AddonCoupon addonCoupon, List<string> with = default(List<string>));

        /// <summary>
        /// Create an addon coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonCouponResponse</returns>
        ApiResponse<AddonCouponResponse> CreateAddonCouponWithHttpInfo (long addonId, AddonCoupon addonCoupon, List<string> with = default(List<string>));
        /// <summary>
        /// Destroy an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns></returns>
        void DeleteAddonCoupon (long addonId, long couponId);

        /// <summary>
        /// Destroy an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAddonCouponWithHttpInfo (long addonId, long couponId);
        /// <summary>
        /// Fetch an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>AddonCouponResponse</returns>
        AddonCouponResponse GetAddonCoupon (long addonId, long couponId, List<string> with = default(List<string>));

        /// <summary>
        /// Fetch an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonCouponResponse</returns>
        ApiResponse<AddonCouponResponse> GetAddonCouponWithHttpInfo (long addonId, long couponId, List<string> with = default(List<string>));
        /// <summary>
        /// Fetch all the coupons for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>AddonCouponListResponse</returns>
        AddonCouponListResponse ListAddonCoupons (long addonId, List<string> with = default(List<string>));

        /// <summary>
        /// Fetch all the coupons for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonCouponListResponse</returns>
        ApiResponse<AddonCouponListResponse> ListAddonCouponsWithHttpInfo (long addonId, List<string> with = default(List<string>));
        /// <summary>
        /// Update an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>AddonCouponResponse</returns>
        AddonCouponResponse UpdateAddonCoupon (long addonId, long couponId, AddonCoupon addonCoupon, List<string> with = default(List<string>));

        /// <summary>
        /// Update an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonCouponResponse</returns>
        ApiResponse<AddonCouponResponse> UpdateAddonCouponWithHttpInfo (long addonId, long couponId, AddonCoupon addonCoupon, List<string> with = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddonCouponsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an addon coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of AddonCouponResponse</returns>
        System.Threading.Tasks.Task<AddonCouponResponse> CreateAddonCouponAsync (long addonId, AddonCoupon addonCoupon, List<string> with = default(List<string>));

        /// <summary>
        /// Create an addon coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonCouponResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonCouponResponse>> CreateAddonCouponAsyncWithHttpInfo (long addonId, AddonCoupon addonCoupon, List<string> with = default(List<string>));
        /// <summary>
        /// Destroy an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAddonCouponAsync (long addonId, long couponId);

        /// <summary>
        /// Destroy an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAddonCouponAsyncWithHttpInfo (long addonId, long couponId);
        /// <summary>
        /// Fetch an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of AddonCouponResponse</returns>
        System.Threading.Tasks.Task<AddonCouponResponse> GetAddonCouponAsync (long addonId, long couponId, List<string> with = default(List<string>));

        /// <summary>
        /// Fetch an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonCouponResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonCouponResponse>> GetAddonCouponAsyncWithHttpInfo (long addonId, long couponId, List<string> with = default(List<string>));
        /// <summary>
        /// Fetch all the coupons for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of AddonCouponListResponse</returns>
        System.Threading.Tasks.Task<AddonCouponListResponse> ListAddonCouponsAsync (long addonId, List<string> with = default(List<string>));

        /// <summary>
        /// Fetch all the coupons for an addon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonCouponListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonCouponListResponse>> ListAddonCouponsAsyncWithHttpInfo (long addonId, List<string> with = default(List<string>));
        /// <summary>
        /// Update an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of AddonCouponResponse</returns>
        System.Threading.Tasks.Task<AddonCouponResponse> UpdateAddonCouponAsync (long addonId, long couponId, AddonCoupon addonCoupon, List<string> with = default(List<string>));

        /// <summary>
        /// Update an addon&#39;s coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonCouponResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddonCouponResponse>> UpdateAddonCouponAsyncWithHttpInfo (long addonId, long couponId, AddonCoupon addonCoupon, List<string> with = default(List<string>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddonCouponsApi : IAddonCouponsApiSync, IAddonCouponsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddonCouponsApi : IAddonCouponsApi
    {
        private Everyday.GmodStore.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCouponsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddonCouponsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCouponsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddonCouponsApi(String basePath)
        {
            this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.MergeConfigurations(
                Everyday.GmodStore.Sdk.Client.GlobalConfiguration.Instance,
                new Everyday.GmodStore.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCouponsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddonCouponsApi(Everyday.GmodStore.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.MergeConfigurations(
                Everyday.GmodStore.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCouponsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AddonCouponsApi(Everyday.GmodStore.Sdk.Client.ISynchronousClient client,Everyday.GmodStore.Sdk.Client.IAsynchronousClient asyncClient, Everyday.GmodStore.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Everyday.GmodStore.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an addon coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>AddonCouponResponse</returns>
        public AddonCouponResponse CreateAddonCoupon (long addonId, AddonCoupon addonCoupon, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse> localVarResponse = CreateAddonCouponWithHttpInfo(addonId, addonCoupon, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an addon coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonCouponResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonCouponResponse > CreateAddonCouponWithHttpInfo (long addonId, AddonCoupon addonCoupon, List<string> with = default(List<string>))
        {
            // verify the required parameter 'addonCoupon' is set
            if (addonCoupon == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'addonCoupon' when calling AddonCouponsApi->CreateAddonCoupon");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }
            localVarRequestOptions.Data = addonCoupon;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< AddonCouponResponse >("/addons/{addon_id}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAddonCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an addon coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of AddonCouponResponse</returns>
        public async System.Threading.Tasks.Task<AddonCouponResponse> CreateAddonCouponAsync (long addonId, AddonCoupon addonCoupon, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse> localVarResponse = await CreateAddonCouponAsyncWithHttpInfo(addonId, addonCoupon, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an addon coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonCouponResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse>> CreateAddonCouponAsyncWithHttpInfo (long addonId, AddonCoupon addonCoupon, List<string> with = default(List<string>))
        {
            // verify the required parameter 'addonCoupon' is set
            if (addonCoupon == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'addonCoupon' when calling AddonCouponsApi->CreateAddonCoupon");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }
            localVarRequestOptions.Data = addonCoupon;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddonCouponResponse>("/addons/{addon_id}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAddonCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroy an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns></returns>
        public void DeleteAddonCoupon (long addonId, long couponId)
        {
             DeleteAddonCouponWithHttpInfo(addonId, couponId);
        }

        /// <summary>
        /// Destroy an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse<Object> DeleteAddonCouponWithHttpInfo (long addonId, long couponId)
        {
            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("coupon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(couponId)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/addons/{addon_id}/coupons/{coupon_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAddonCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroy an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAddonCouponAsync (long addonId, long couponId)
        {
             await DeleteAddonCouponAsyncWithHttpInfo(addonId, couponId);

        }

        /// <summary>
        /// Destroy an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<Object>> DeleteAddonCouponAsyncWithHttpInfo (long addonId, long couponId)
        {

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("coupon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(couponId)); // path parameter

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/addons/{addon_id}/coupons/{coupon_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAddonCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>AddonCouponResponse</returns>
        public AddonCouponResponse GetAddonCoupon (long addonId, long couponId, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse> localVarResponse = GetAddonCouponWithHttpInfo(addonId, couponId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonCouponResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonCouponResponse > GetAddonCouponWithHttpInfo (long addonId, long couponId, List<string> with = default(List<string>))
        {
            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("coupon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AddonCouponResponse >("/addons/{addon_id}/coupons/{coupon_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAddonCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of AddonCouponResponse</returns>
        public async System.Threading.Tasks.Task<AddonCouponResponse> GetAddonCouponAsync (long addonId, long couponId, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse> localVarResponse = await GetAddonCouponAsyncWithHttpInfo(addonId, couponId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonCouponResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse>> GetAddonCouponAsyncWithHttpInfo (long addonId, long couponId, List<string> with = default(List<string>))
        {

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("coupon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AddonCouponResponse>("/addons/{addon_id}/coupons/{coupon_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAddonCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch all the coupons for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>AddonCouponListResponse</returns>
        public AddonCouponListResponse ListAddonCoupons (long addonId, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponListResponse> localVarResponse = ListAddonCouponsWithHttpInfo(addonId, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all the coupons for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonCouponListResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonCouponListResponse > ListAddonCouponsWithHttpInfo (long addonId, List<string> with = default(List<string>))
        {
            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< AddonCouponListResponse >("/addons/{addon_id}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAddonCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch all the coupons for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of AddonCouponListResponse</returns>
        public async System.Threading.Tasks.Task<AddonCouponListResponse> ListAddonCouponsAsync (long addonId, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponListResponse> localVarResponse = await ListAddonCouponsAsyncWithHttpInfo(addonId, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all the coupons for an addon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonCouponListResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponListResponse>> ListAddonCouponsAsyncWithHttpInfo (long addonId, List<string> with = default(List<string>))
        {

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AddonCouponListResponse>("/addons/{addon_id}/coupons", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAddonCoupons", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>AddonCouponResponse</returns>
        public AddonCouponResponse UpdateAddonCoupon (long addonId, long couponId, AddonCoupon addonCoupon, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse> localVarResponse = UpdateAddonCouponWithHttpInfo(addonId, couponId, addonCoupon, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>ApiResponse of AddonCouponResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonCouponResponse > UpdateAddonCouponWithHttpInfo (long addonId, long couponId, AddonCoupon addonCoupon, List<string> with = default(List<string>))
        {
            // verify the required parameter 'addonCoupon' is set
            if (addonCoupon == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'addonCoupon' when calling AddonCouponsApi->UpdateAddonCoupon");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("coupon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }
            localVarRequestOptions.Data = addonCoupon;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< AddonCouponResponse >("/addons/{addon_id}/coupons/{coupon_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAddonCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of AddonCouponResponse</returns>
        public async System.Threading.Tasks.Task<AddonCouponResponse> UpdateAddonCouponAsync (long addonId, long couponId, AddonCoupon addonCoupon, List<string> with = default(List<string>))
        {
             Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse> localVarResponse = await UpdateAddonCouponAsyncWithHttpInfo(addonId, couponId, addonCoupon, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an addon&#39;s coupon 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addonId">Id of the addon</param>
        /// <param name="couponId">Id of the coupon</param>
        /// <param name="addonCoupon"></param>
        /// <param name="with">The relations you want to fetch with the &#x60;AddonCoupon&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (AddonCouponResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonCouponResponse>> UpdateAddonCouponAsyncWithHttpInfo (long addonId, long couponId, AddonCoupon addonCoupon, List<string> with = default(List<string>))
        {
            // verify the required parameter 'addonCoupon' is set
            if (addonCoupon == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'addonCoupon' when calling AddonCouponsApi->UpdateAddonCoupon");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId)); // path parameter
            localVarRequestOptions.PathParameters.Add("coupon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(couponId)); // path parameter
            if (with != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
            }
            localVarRequestOptions.Data = addonCoupon;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AddonCouponResponse>("/addons/{addon_id}/coupons/{coupon_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAddonCoupon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
