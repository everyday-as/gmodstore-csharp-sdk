/*
 * GmodStore API
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Everyday.GmodStore.Sdk.Client;
using Everyday.GmodStore.Sdk.Model;

namespace Everyday.GmodStore.Sdk.Api
{

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAddonPurchasesApiSync : IApiAccessor
{
#region Synchronous Operations
/// <summary>
/// Create a purchase for an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="newAddonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>AddonPurchaseResponse</returns>
AddonPurchaseResponse CreateAddonPurchase (long addonId, NewAddonPurchase newAddonPurchase, List<string> with = default(List<string>));

/// <summary>
/// Create a purchase for an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="newAddonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>ApiResponse of AddonPurchaseResponse</returns>
ApiResponse<AddonPurchaseResponse> CreateAddonPurchaseWithHttpInfo (long addonId, NewAddonPurchase newAddonPurchase, List<string> with = default(List<string>));
/// <summary>
/// Get a purchase of an addon by user
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>AddonPurchaseResponse</returns>
AddonPurchaseResponse GetAddonPurchase (long addonId, long userId, List<string> with = default(List<string>));

/// <summary>
/// Get a purchase of an addon by user
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>ApiResponse of AddonPurchaseResponse</returns>
ApiResponse<AddonPurchaseResponse> GetAddonPurchaseWithHttpInfo (long addonId, long userId, List<string> with = default(List<string>));
/// <summary>
/// Fetch all purchases of an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>AddonPurchaseListResponse</returns>
AddonPurchaseListResponse ListAddonPurchases (long addonId, List<string> with = default(List<string>));

/// <summary>
/// Fetch all purchases of an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>ApiResponse of AddonPurchaseListResponse</returns>
ApiResponse<AddonPurchaseListResponse> ListAddonPurchasesWithHttpInfo (long addonId, List<string> with = default(List<string>));
/// <summary>
/// Update a purchase for an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="addonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>AddonPurchaseResponse</returns>
AddonPurchaseResponse UpdateAddonPurchase (long addonId, long userId, AddonPurchase addonPurchase, List<string> with = default(List<string>));

/// <summary>
/// Update a purchase for an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="addonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>ApiResponse of AddonPurchaseResponse</returns>
ApiResponse<AddonPurchaseResponse> UpdateAddonPurchaseWithHttpInfo (long addonId, long userId, AddonPurchase addonPurchase, List<string> with = default(List<string>));
#endregion Synchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAddonPurchasesApiAsync : IApiAccessor
{
#region Asynchronous Operations
/// <summary>
/// Create a purchase for an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="newAddonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of AddonPurchaseResponse</returns>
System.Threading.Tasks.Task<AddonPurchaseResponse> CreateAddonPurchaseAsync (long addonId, NewAddonPurchase newAddonPurchase, List<string> with = default(List<string>));

/// <summary>
/// Create a purchase for an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="newAddonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of ApiResponse (AddonPurchaseResponse)</returns>
System.Threading.Tasks.Task<ApiResponse<AddonPurchaseResponse> > CreateAddonPurchaseAsyncWithHttpInfo (long addonId, NewAddonPurchase newAddonPurchase, List<string> with = default(List<string>));
/// <summary>
/// Get a purchase of an addon by user
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of AddonPurchaseResponse</returns>
System.Threading.Tasks.Task<AddonPurchaseResponse> GetAddonPurchaseAsync (long addonId, long userId, List<string> with = default(List<string>));

/// <summary>
/// Get a purchase of an addon by user
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of ApiResponse (AddonPurchaseResponse)</returns>
System.Threading.Tasks.Task<ApiResponse<AddonPurchaseResponse> > GetAddonPurchaseAsyncWithHttpInfo (long addonId, long userId, List<string> with = default(List<string>));
/// <summary>
/// Fetch all purchases of an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of AddonPurchaseListResponse</returns>
System.Threading.Tasks.Task<AddonPurchaseListResponse> ListAddonPurchasesAsync (long addonId, List<string> with = default(List<string>));

/// <summary>
/// Fetch all purchases of an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of ApiResponse (AddonPurchaseListResponse)</returns>
System.Threading.Tasks.Task<ApiResponse<AddonPurchaseListResponse> > ListAddonPurchasesAsyncWithHttpInfo (long addonId, List<string> with = default(List<string>));
/// <summary>
/// Update a purchase for an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="addonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of AddonPurchaseResponse</returns>
System.Threading.Tasks.Task<AddonPurchaseResponse> UpdateAddonPurchaseAsync (long addonId, long userId, AddonPurchase addonPurchase, List<string> with = default(List<string>));

/// <summary>
/// Update a purchase for an addon
/// </summary>
/// <remarks>
///
/// </remarks>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="addonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of ApiResponse (AddonPurchaseResponse)</returns>
System.Threading.Tasks.Task<ApiResponse<AddonPurchaseResponse> > UpdateAddonPurchaseAsyncWithHttpInfo (long addonId, long userId, AddonPurchase addonPurchase, List<string> with = default(List<string>));
#endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAddonPurchasesApi : IAddonPurchasesApiSync, IAddonPurchasesApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class AddonPurchasesApi : IAddonPurchasesApi
{
private Everyday.GmodStore.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

/// <summary>
/// Initializes a new instance of the <see cref="AddonPurchasesApi"/> class.
/// </summary>
/// <returns></returns>
public AddonPurchasesApi() : this((string) null)
{
}

/// <summary>
/// Initializes a new instance of the <see cref="AddonPurchasesApi"/> class.
/// </summary>
/// <returns></returns>
public AddonPurchasesApi(String basePath)
{
	this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.MergeConfigurations(
		Everyday.GmodStore.Sdk.Client.GlobalConfiguration.Instance,
		new Everyday.GmodStore.Sdk.Client.Configuration {
				BasePath = basePath
			}
		);
	this.Client = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
	this.AsynchronousClient = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
	this.ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
}

/// <summary>
/// Initializes a new instance of the <see cref="AddonPurchasesApi"/> class
/// using Configuration object
/// </summary>
/// <param name="configuration">An instance of Configuration</param>
/// <returns></returns>
public AddonPurchasesApi(Everyday.GmodStore.Sdk.Client.Configuration configuration)
{
	if (configuration == null) throw new ArgumentNullException("configuration");

	this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.MergeConfigurations(
		Everyday.GmodStore.Sdk.Client.GlobalConfiguration.Instance,
		configuration
		);
	this.Client = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
	this.AsynchronousClient = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
	ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
}

/// <summary>
/// Initializes a new instance of the <see cref="AddonPurchasesApi"/> class
/// using a Configuration object and client instance.
/// </summary>
/// <param name="client">The client interface for synchronous API access.</param>
/// <param name="asyncClient">The client interface for asynchronous API access.</param>
/// <param name="configuration">The configuration object.</param>
public AddonPurchasesApi(Everyday.GmodStore.Sdk.Client.ISynchronousClient client,Everyday.GmodStore.Sdk.Client.IAsynchronousClient asyncClient, Everyday.GmodStore.Sdk.Client.IReadableConfiguration configuration)
{
	if(client == null) throw new ArgumentNullException("client");
	if(asyncClient == null) throw new ArgumentNullException("asyncClient");
	if(configuration == null) throw new ArgumentNullException("configuration");

	this.Client = client;
	this.AsynchronousClient = asyncClient;
	this.Configuration = configuration;
	this.ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
}

/// <summary>
/// The client for accessing this underlying API asynchronously.
/// </summary>
public Everyday.GmodStore.Sdk.Client.IAsynchronousClient AsynchronousClient {
	get; set;
}

/// <summary>
/// The client for accessing this underlying API synchronously.
/// </summary>
public Everyday.GmodStore.Sdk.Client.ISynchronousClient Client {
	get; set;
}

/// <summary>
/// Gets the base path of the API client.
/// </summary>
/// <value>The base path</value>
public String GetBasePath()
{
	return this.Configuration.BasePath;
}

/// <summary>
/// Gets or sets the configuration object
/// </summary>
/// <value>An instance of the Configuration</value>
public Everyday.GmodStore.Sdk.Client.IReadableConfiguration Configuration {
	get; set;
}

/// <summary>
/// Provides a factory method hook for the creation of exceptions.
/// </summary>
public Everyday.GmodStore.Sdk.Client.ExceptionFactory ExceptionFactory
{
	get
	{
		if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
		{
			throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
		}
		return _exceptionFactory;
	}
	set { _exceptionFactory = value; }
}

/// <summary>
/// Create a purchase for an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="newAddonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>AddonPurchaseResponse</returns>
public AddonPurchaseResponse CreateAddonPurchase (long addonId, NewAddonPurchase newAddonPurchase, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> localVarResponse = CreateAddonPurchaseWithHttpInfo(addonId, newAddonPurchase, with);
	return localVarResponse.Data;
}

/// <summary>
/// Create a purchase for an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="newAddonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>ApiResponse of AddonPurchaseResponse</returns>
public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonPurchaseResponse > CreateAddonPurchaseWithHttpInfo (long addonId, NewAddonPurchase newAddonPurchase, List<string> with = default(List<string>))
{
	// verify the required parameter 'newAddonPurchase' is set
	if (newAddonPurchase == null)
		throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'newAddonPurchase' when calling AddonPurchasesApi->CreateAddonPurchase");

	Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

	String[] _contentTypes = new String[] {
		"application/json"
	};

	// to determine the Accept header
	String[] _accepts = new String[] {
		"application/json"
	};

	var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
	if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

	var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
	if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

	localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId));     // path parameter
	if (with != null)
	{
		localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
	}
	localVarRequestOptions.Data = newAddonPurchase;

	// authentication (bearerAuth) required
	// bearer authentication required
	if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
	{
		localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
	}

	// make the HTTP request
	var localVarResponse = this.Client.Post< AddonPurchaseResponse >("/addons/{addon_id}/purchases", localVarRequestOptions, this.Configuration);

	if (this.ExceptionFactory != null)
	{
		Exception _exception = this.ExceptionFactory("CreateAddonPurchase", localVarResponse);
		if (_exception != null) throw _exception;
	}

	return localVarResponse;
}

/// <summary>
/// Create a purchase for an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="newAddonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of AddonPurchaseResponse</returns>
public async System.Threading.Tasks.Task<AddonPurchaseResponse> CreateAddonPurchaseAsync (long addonId, NewAddonPurchase newAddonPurchase, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> localVarResponse = await CreateAddonPurchaseAsyncWithHttpInfo(addonId, newAddonPurchase, with);
	return localVarResponse.Data;

}

/// <summary>
/// Create a purchase for an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="newAddonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of ApiResponse (AddonPurchaseResponse)</returns>
public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> > CreateAddonPurchaseAsyncWithHttpInfo (long addonId, NewAddonPurchase newAddonPurchase, List<string> with = default(List<string>))
{
	// verify the required parameter 'newAddonPurchase' is set
	if (newAddonPurchase == null)
		throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'newAddonPurchase' when calling AddonPurchasesApi->CreateAddonPurchase");


	Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

	String[] _contentTypes = new String[] {
		"application/json"
	};

	// to determine the Accept header
	String[] _accepts = new String[] {
		"application/json"
	};

	foreach (var _contentType in _contentTypes)
		localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

	foreach (var _accept in _accepts)
		localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

	localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId));     // path parameter
	if (with != null)
	{
		localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
	}
	localVarRequestOptions.Data = newAddonPurchase;

	// authentication (bearerAuth) required
	// bearer authentication required
	if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
	{
		localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
	}

	// make the HTTP request

	var localVarResponse = await this.AsynchronousClient.PostAsync<AddonPurchaseResponse>("/addons/{addon_id}/purchases", localVarRequestOptions, this.Configuration);

	if (this.ExceptionFactory != null)
	{
		Exception _exception = this.ExceptionFactory("CreateAddonPurchase", localVarResponse);
		if (_exception != null) throw _exception;
	}

	return localVarResponse;
}

/// <summary>
/// Get a purchase of an addon by user
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>AddonPurchaseResponse</returns>
public AddonPurchaseResponse GetAddonPurchase (long addonId, long userId, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> localVarResponse = GetAddonPurchaseWithHttpInfo(addonId, userId, with);
	return localVarResponse.Data;
}

/// <summary>
/// Get a purchase of an addon by user
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>ApiResponse of AddonPurchaseResponse</returns>
public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonPurchaseResponse > GetAddonPurchaseWithHttpInfo (long addonId, long userId, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

	String[] _contentTypes = new String[] {
	};

	// to determine the Accept header
	String[] _accepts = new String[] {
		"application/json"
	};

	var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
	if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

	var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
	if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

	localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId));     // path parameter
	localVarRequestOptions.PathParameters.Add("user_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(userId));     // path parameter
	if (with != null)
	{
		localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
	}

	// authentication (bearerAuth) required
	// bearer authentication required
	if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
	{
		localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
	}

	// make the HTTP request
	var localVarResponse = this.Client.Get< AddonPurchaseResponse >("/addons/{addon_id}/purchases/{user_id}", localVarRequestOptions, this.Configuration);

	if (this.ExceptionFactory != null)
	{
		Exception _exception = this.ExceptionFactory("GetAddonPurchase", localVarResponse);
		if (_exception != null) throw _exception;
	}

	return localVarResponse;
}

/// <summary>
/// Get a purchase of an addon by user
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of AddonPurchaseResponse</returns>
public async System.Threading.Tasks.Task<AddonPurchaseResponse> GetAddonPurchaseAsync (long addonId, long userId, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> localVarResponse = await GetAddonPurchaseAsyncWithHttpInfo(addonId, userId, with);
	return localVarResponse.Data;

}

/// <summary>
/// Get a purchase of an addon by user
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of ApiResponse (AddonPurchaseResponse)</returns>
public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> > GetAddonPurchaseAsyncWithHttpInfo (long addonId, long userId, List<string> with = default(List<string>))
{

	Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

	String[] _contentTypes = new String[] {
	};

	// to determine the Accept header
	String[] _accepts = new String[] {
		"application/json"
	};

	foreach (var _contentType in _contentTypes)
		localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

	foreach (var _accept in _accepts)
		localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

	localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId));     // path parameter
	localVarRequestOptions.PathParameters.Add("user_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(userId));     // path parameter
	if (with != null)
	{
		localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
	}

	// authentication (bearerAuth) required
	// bearer authentication required
	if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
	{
		localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
	}

	// make the HTTP request

	var localVarResponse = await this.AsynchronousClient.GetAsync<AddonPurchaseResponse>("/addons/{addon_id}/purchases/{user_id}", localVarRequestOptions, this.Configuration);

	if (this.ExceptionFactory != null)
	{
		Exception _exception = this.ExceptionFactory("GetAddonPurchase", localVarResponse);
		if (_exception != null) throw _exception;
	}

	return localVarResponse;
}

/// <summary>
/// Fetch all purchases of an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>AddonPurchaseListResponse</returns>
public AddonPurchaseListResponse ListAddonPurchases (long addonId, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseListResponse> localVarResponse = ListAddonPurchasesWithHttpInfo(addonId, with);
	return localVarResponse.Data;
}

/// <summary>
/// Fetch all purchases of an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>ApiResponse of AddonPurchaseListResponse</returns>
public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonPurchaseListResponse > ListAddonPurchasesWithHttpInfo (long addonId, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

	String[] _contentTypes = new String[] {
	};

	// to determine the Accept header
	String[] _accepts = new String[] {
		"application/json"
	};

	var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
	if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

	var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
	if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

	localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId));     // path parameter
	if (with != null)
	{
		localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
	}

	// authentication (bearerAuth) required
	// bearer authentication required
	if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
	{
		localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
	}

	// make the HTTP request
	var localVarResponse = this.Client.Get< AddonPurchaseListResponse >("/addons/{addon_id}/purchases", localVarRequestOptions, this.Configuration);

	if (this.ExceptionFactory != null)
	{
		Exception _exception = this.ExceptionFactory("ListAddonPurchases", localVarResponse);
		if (_exception != null) throw _exception;
	}

	return localVarResponse;
}

/// <summary>
/// Fetch all purchases of an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of AddonPurchaseListResponse</returns>
public async System.Threading.Tasks.Task<AddonPurchaseListResponse> ListAddonPurchasesAsync (long addonId, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseListResponse> localVarResponse = await ListAddonPurchasesAsyncWithHttpInfo(addonId, with);
	return localVarResponse.Data;

}

/// <summary>
/// Fetch all purchases of an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of ApiResponse (AddonPurchaseListResponse)</returns>
public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseListResponse> > ListAddonPurchasesAsyncWithHttpInfo (long addonId, List<string> with = default(List<string>))
{

	Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

	String[] _contentTypes = new String[] {
	};

	// to determine the Accept header
	String[] _accepts = new String[] {
		"application/json"
	};

	foreach (var _contentType in _contentTypes)
		localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

	foreach (var _accept in _accepts)
		localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

	localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId));     // path parameter
	if (with != null)
	{
		localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
	}

	// authentication (bearerAuth) required
	// bearer authentication required
	if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
	{
		localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
	}

	// make the HTTP request

	var localVarResponse = await this.AsynchronousClient.GetAsync<AddonPurchaseListResponse>("/addons/{addon_id}/purchases", localVarRequestOptions, this.Configuration);

	if (this.ExceptionFactory != null)
	{
		Exception _exception = this.ExceptionFactory("ListAddonPurchases", localVarResponse);
		if (_exception != null) throw _exception;
	}

	return localVarResponse;
}

/// <summary>
/// Update a purchase for an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="addonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>AddonPurchaseResponse</returns>
public AddonPurchaseResponse UpdateAddonPurchase (long addonId, long userId, AddonPurchase addonPurchase, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> localVarResponse = UpdateAddonPurchaseWithHttpInfo(addonId, userId, addonPurchase, with);
	return localVarResponse.Data;
}

/// <summary>
/// Update a purchase for an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="addonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>ApiResponse of AddonPurchaseResponse</returns>
public Everyday.GmodStore.Sdk.Client.ApiResponse< AddonPurchaseResponse > UpdateAddonPurchaseWithHttpInfo (long addonId, long userId, AddonPurchase addonPurchase, List<string> with = default(List<string>))
{
	// verify the required parameter 'addonPurchase' is set
	if (addonPurchase == null)
		throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'addonPurchase' when calling AddonPurchasesApi->UpdateAddonPurchase");

	Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

	String[] _contentTypes = new String[] {
		"application/json"
	};

	// to determine the Accept header
	String[] _accepts = new String[] {
		"application/json"
	};

	var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
	if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

	var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
	if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

	localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId));     // path parameter
	localVarRequestOptions.PathParameters.Add("user_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(userId));     // path parameter
	if (with != null)
	{
		localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
	}
	localVarRequestOptions.Data = addonPurchase;

	// authentication (bearerAuth) required
	// bearer authentication required
	if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
	{
		localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
	}

	// make the HTTP request
	var localVarResponse = this.Client.Put< AddonPurchaseResponse >("/addons/{addon_id}/purchases/{user_id}", localVarRequestOptions, this.Configuration);

	if (this.ExceptionFactory != null)
	{
		Exception _exception = this.ExceptionFactory("UpdateAddonPurchase", localVarResponse);
		if (_exception != null) throw _exception;
	}

	return localVarResponse;
}

/// <summary>
/// Update a purchase for an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="addonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of AddonPurchaseResponse</returns>
public async System.Threading.Tasks.Task<AddonPurchaseResponse> UpdateAddonPurchaseAsync (long addonId, long userId, AddonPurchase addonPurchase, List<string> with = default(List<string>))
{
	Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> localVarResponse = await UpdateAddonPurchaseAsyncWithHttpInfo(addonId, userId, addonPurchase, with);
	return localVarResponse.Data;

}

/// <summary>
/// Update a purchase for an addon
/// </summary>
/// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
/// <param name="addonId">Id of the addon</param>
/// <param name="userId">Id of the user</param>
/// <param name="addonPurchase"></param>
/// <param name="with">The relations you want to fetch with the &#x60;AddonPurchase&#x60; (optional)</param>
/// <returns>Task of ApiResponse (AddonPurchaseResponse)</returns>
public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<AddonPurchaseResponse> > UpdateAddonPurchaseAsyncWithHttpInfo (long addonId, long userId, AddonPurchase addonPurchase, List<string> with = default(List<string>))
{
	// verify the required parameter 'addonPurchase' is set
	if (addonPurchase == null)
		throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'addonPurchase' when calling AddonPurchasesApi->UpdateAddonPurchase");


	Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

	String[] _contentTypes = new String[] {
		"application/json"
	};

	// to determine the Accept header
	String[] _accepts = new String[] {
		"application/json"
	};

	foreach (var _contentType in _contentTypes)
		localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);

	foreach (var _accept in _accepts)
		localVarRequestOptions.HeaderParameters.Add("Accept", _accept);

	localVarRequestOptions.PathParameters.Add("addon_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(addonId));     // path parameter
	localVarRequestOptions.PathParameters.Add("user_id", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(userId));     // path parameter
	if (with != null)
	{
		localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("csv", "with", with));
	}
	localVarRequestOptions.Data = addonPurchase;

	// authentication (bearerAuth) required
	// bearer authentication required
	if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
	{
		localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
	}

	// make the HTTP request

	var localVarResponse = await this.AsynchronousClient.PutAsync<AddonPurchaseResponse>("/addons/{addon_id}/purchases/{user_id}", localVarRequestOptions, this.Configuration);

	if (this.ExceptionFactory != null)
	{
		Exception _exception = this.ExceptionFactory("UpdateAddonPurchase", localVarResponse);
		if (_exception != null) throw _exception;
	}

	return localVarResponse;
}

}
}
