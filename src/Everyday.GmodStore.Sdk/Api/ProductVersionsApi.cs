/*
 * gmodstore
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Everyday.GmodStore.Sdk.Client;
using Everyday.GmodStore.Sdk.Model;

namespace Everyday.GmodStore.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductVersionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a version for a product
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="file"></param>
        /// <param name="releaseType"></param>
        /// <returns>CreateProductVersionResponse</returns>
        CreateProductVersionResponse CreateProductVersion(string product, string name, string changelog, System.IO.Stream file, string releaseType);

        /// <summary>
        /// Create a version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="file"></param>
        /// <param name="releaseType"></param>
        /// <returns>ApiResponse of CreateProductVersionResponse</returns>
        ApiResponse<CreateProductVersionResponse> CreateProductVersionWithHttpInfo(string product, string name, string changelog, System.IO.Stream file, string releaseType);
        /// <summary>
        /// Delete the specified version for a product
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <returns>DeleteProductVersionResponse</returns>
        DeleteProductVersionResponse DeleteProductVersion(string product, string version);

        /// <summary>
        /// Delete the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of DeleteProductVersionResponse</returns>
        ApiResponse<DeleteProductVersionResponse> DeleteProductVersionWithHttpInfo(string product, string version);
        /// <summary>
        /// Get a one time use url for downloading a product
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <returns>DownloadProductVersionResponse</returns>
        DownloadProductVersionResponse GetProductDownloadToken(string product, string version);

        /// <summary>
        /// Get a one time use url for downloading a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of DownloadProductVersionResponse</returns>
        ApiResponse<DownloadProductVersionResponse> GetProductDownloadTokenWithHttpInfo(string product, string version);
        /// <summary>
        /// Show the specified version for a product
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <returns>GetProductVersionResponse</returns>
        GetProductVersionResponse GetProductVersion(string product, string version, ProductVersionFilter filter = default(ProductVersionFilter));

        /// <summary>
        /// Show the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <returns>ApiResponse of GetProductVersionResponse</returns>
        ApiResponse<GetProductVersionResponse> GetProductVersionWithHttpInfo(string product, string version, ProductVersionFilter filter = default(ProductVersionFilter));
        /// <summary>
        /// List all versions for a product
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="perPage"> (optional, default to 24)</param>
        /// <param name="cursor">The cursor from which to return paginated results starting after (optional)</param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <returns>Object</returns>
        Object ListProductVersions(string product, int? perPage = default(int?), string cursor = default(string), ProductVersionFilter filter = default(ProductVersionFilter));

        /// <summary>
        /// List all versions for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="perPage"> (optional, default to 24)</param>
        /// <param name="cursor">The cursor from which to return paginated results starting after (optional)</param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ListProductVersionsWithHttpInfo(string product, int? perPage = default(int?), string cursor = default(string), ProductVersionFilter filter = default(ProductVersionFilter));
        /// <summary>
        /// Update the specified version for a product
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="updateProductVersionPayload"> (optional)</param>
        /// <returns>UpdateProductVersionResponse</returns>
        UpdateProductVersionResponse UpdateProductVersion(string product, string version, UpdateProductVersionPayload updateProductVersionPayload = default(UpdateProductVersionPayload));

        /// <summary>
        /// Update the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="updateProductVersionPayload"> (optional)</param>
        /// <returns>ApiResponse of UpdateProductVersionResponse</returns>
        ApiResponse<UpdateProductVersionResponse> UpdateProductVersionWithHttpInfo(string product, string version, UpdateProductVersionPayload updateProductVersionPayload = default(UpdateProductVersionPayload));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductVersionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="file"></param>
        /// <param name="releaseType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateProductVersionResponse</returns>
        System.Threading.Tasks.Task<CreateProductVersionResponse> CreateProductVersionAsync(string product, string name, string changelog, System.IO.Stream file, string releaseType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="file"></param>
        /// <param name="releaseType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateProductVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateProductVersionResponse>> CreateProductVersionWithHttpInfoAsync(string product, string name, string changelog, System.IO.Stream file, string releaseType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteProductVersionResponse</returns>
        System.Threading.Tasks.Task<DeleteProductVersionResponse> DeleteProductVersionAsync(string product, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteProductVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteProductVersionResponse>> DeleteProductVersionWithHttpInfoAsync(string product, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a one time use url for downloading a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadProductVersionResponse</returns>
        System.Threading.Tasks.Task<DownloadProductVersionResponse> GetProductDownloadTokenAsync(string product, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a one time use url for downloading a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadProductVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DownloadProductVersionResponse>> GetProductDownloadTokenWithHttpInfoAsync(string product, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Show the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductVersionResponse</returns>
        System.Threading.Tasks.Task<GetProductVersionResponse> GetProductVersionAsync(string product, string version, ProductVersionFilter filter = default(ProductVersionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Show the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProductVersionResponse>> GetProductVersionWithHttpInfoAsync(string product, string version, ProductVersionFilter filter = default(ProductVersionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all versions for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="perPage"> (optional, default to 24)</param>
        /// <param name="cursor">The cursor from which to return paginated results starting after (optional)</param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ListProductVersionsAsync(string product, int? perPage = default(int?), string cursor = default(string), ProductVersionFilter filter = default(ProductVersionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all versions for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="perPage"> (optional, default to 24)</param>
        /// <param name="cursor">The cursor from which to return paginated results starting after (optional)</param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ListProductVersionsWithHttpInfoAsync(string product, int? perPage = default(int?), string cursor = default(string), ProductVersionFilter filter = default(ProductVersionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="updateProductVersionPayload"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateProductVersionResponse</returns>
        System.Threading.Tasks.Task<UpdateProductVersionResponse> UpdateProductVersionAsync(string product, string version, UpdateProductVersionPayload updateProductVersionPayload = default(UpdateProductVersionPayload), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the specified version for a product
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="updateProductVersionPayload"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateProductVersionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateProductVersionResponse>> UpdateProductVersionWithHttpInfoAsync(string product, string version, UpdateProductVersionPayload updateProductVersionPayload = default(UpdateProductVersionPayload), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductVersionsApi : IProductVersionsApiSync, IProductVersionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductVersionsApi : IProductVersionsApi
    {
        private Everyday.GmodStore.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductVersionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductVersionsApi(string basePath)
        {
            this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.MergeConfigurations(
                Everyday.GmodStore.Sdk.Client.GlobalConfiguration.Instance,
                new Everyday.GmodStore.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductVersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductVersionsApi(Everyday.GmodStore.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Everyday.GmodStore.Sdk.Client.Configuration.MergeConfigurations(
                Everyday.GmodStore.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Everyday.GmodStore.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductVersionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductVersionsApi(Everyday.GmodStore.Sdk.Client.ISynchronousClient client, Everyday.GmodStore.Sdk.Client.IAsynchronousClient asyncClient, Everyday.GmodStore.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Everyday.GmodStore.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Everyday.GmodStore.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Everyday.GmodStore.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="file"></param>
        /// <param name="releaseType"></param>
        /// <returns>CreateProductVersionResponse</returns>
        public CreateProductVersionResponse CreateProductVersion(string product, string name, string changelog, System.IO.Stream file, string releaseType)
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<CreateProductVersionResponse> localVarResponse = CreateProductVersionWithHttpInfo(product, name, changelog, file, releaseType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="file"></param>
        /// <param name="releaseType"></param>
        /// <returns>ApiResponse of CreateProductVersionResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse<CreateProductVersionResponse> CreateProductVersionWithHttpInfo(string product, string name, string changelog, System.IO.Stream file, string releaseType)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->CreateProductVersion");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'name' when calling ProductVersionsApi->CreateProductVersion");

            // verify the required parameter 'changelog' is set
            if (changelog == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'changelog' when calling ProductVersionsApi->CreateProductVersion");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling ProductVersionsApi->CreateProductVersion");

            // verify the required parameter 'releaseType' is set
            if (releaseType == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'releaseType' when calling ProductVersionsApi->CreateProductVersion");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.FormParameters.Add("name", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FormParameters.Add("changelog", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(changelog)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("releaseType", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(releaseType)); // form parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateProductVersionResponse>("/api/v3/products/{product}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="file"></param>
        /// <param name="releaseType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateProductVersionResponse</returns>
        public async System.Threading.Tasks.Task<CreateProductVersionResponse> CreateProductVersionAsync(string product, string name, string changelog, System.IO.Stream file, string releaseType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<CreateProductVersionResponse> localVarResponse = await CreateProductVersionWithHttpInfoAsync(product, name, changelog, file, releaseType, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="name"></param>
        /// <param name="changelog"></param>
        /// <param name="file"></param>
        /// <param name="releaseType"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateProductVersionResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<CreateProductVersionResponse>> CreateProductVersionWithHttpInfoAsync(string product, string name, string changelog, System.IO.Stream file, string releaseType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->CreateProductVersion");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'name' when calling ProductVersionsApi->CreateProductVersion");

            // verify the required parameter 'changelog' is set
            if (changelog == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'changelog' when calling ProductVersionsApi->CreateProductVersion");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling ProductVersionsApi->CreateProductVersion");

            // verify the required parameter 'releaseType' is set
            if (releaseType == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'releaseType' when calling ProductVersionsApi->CreateProductVersion");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.FormParameters.Add("name", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FormParameters.Add("changelog", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(changelog)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("releaseType", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(releaseType)); // form parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateProductVersionResponse>("/api/v3/products/{product}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <returns>DeleteProductVersionResponse</returns>
        public DeleteProductVersionResponse DeleteProductVersion(string product, string version)
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<DeleteProductVersionResponse> localVarResponse = DeleteProductVersionWithHttpInfo(product, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of DeleteProductVersionResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse<DeleteProductVersionResponse> DeleteProductVersionWithHttpInfo(string product, string version)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->DeleteProductVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'version' when calling ProductVersionsApi->DeleteProductVersion");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteProductVersionResponse>("/api/v3/products/{product}/versions/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteProductVersionResponse</returns>
        public async System.Threading.Tasks.Task<DeleteProductVersionResponse> DeleteProductVersionAsync(string product, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<DeleteProductVersionResponse> localVarResponse = await DeleteProductVersionWithHttpInfoAsync(product, version, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteProductVersionResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<DeleteProductVersionResponse>> DeleteProductVersionWithHttpInfoAsync(string product, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->DeleteProductVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'version' when calling ProductVersionsApi->DeleteProductVersion");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteProductVersionResponse>("/api/v3/products/{product}/versions/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a one time use url for downloading a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <returns>DownloadProductVersionResponse</returns>
        public DownloadProductVersionResponse GetProductDownloadToken(string product, string version)
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<DownloadProductVersionResponse> localVarResponse = GetProductDownloadTokenWithHttpInfo(product, version);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a one time use url for downloading a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of DownloadProductVersionResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse<DownloadProductVersionResponse> GetProductDownloadTokenWithHttpInfo(string product, string version)
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->GetProductDownloadToken");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'version' when calling ProductVersionsApi->GetProductDownloadToken");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DownloadProductVersionResponse>("/api/v3/products/{product}/versions/{version}/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDownloadToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a one time use url for downloading a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DownloadProductVersionResponse</returns>
        public async System.Threading.Tasks.Task<DownloadProductVersionResponse> GetProductDownloadTokenAsync(string product, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<DownloadProductVersionResponse> localVarResponse = await GetProductDownloadTokenWithHttpInfoAsync(product, version, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a one time use url for downloading a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DownloadProductVersionResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<DownloadProductVersionResponse>> GetProductDownloadTokenWithHttpInfoAsync(string product, string version, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->GetProductDownloadToken");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'version' when calling ProductVersionsApi->GetProductDownloadToken");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(version)); // path parameter

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DownloadProductVersionResponse>("/api/v3/products/{product}/versions/{version}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductDownloadToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <returns>GetProductVersionResponse</returns>
        public GetProductVersionResponse GetProductVersion(string product, string version, ProductVersionFilter filter = default(ProductVersionFilter))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<GetProductVersionResponse> localVarResponse = GetProductVersionWithHttpInfo(product, version, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <returns>ApiResponse of GetProductVersionResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse<GetProductVersionResponse> GetProductVersionWithHttpInfo(string product, string version, ProductVersionFilter filter = default(ProductVersionFilter))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->GetProductVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'version' when calling ProductVersionsApi->GetProductVersion");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProductVersionResponse>("/api/v3/products/{product}/versions/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Show the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProductVersionResponse</returns>
        public async System.Threading.Tasks.Task<GetProductVersionResponse> GetProductVersionAsync(string product, string version, ProductVersionFilter filter = default(ProductVersionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<GetProductVersionResponse> localVarResponse = await GetProductVersionWithHttpInfoAsync(product, version, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Show the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProductVersionResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<GetProductVersionResponse>> GetProductVersionWithHttpInfoAsync(string product, string version, ProductVersionFilter filter = default(ProductVersionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->GetProductVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'version' when calling ProductVersionsApi->GetProductVersion");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProductVersionResponse>("/api/v3/products/{product}/versions/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all versions for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="perPage"> (optional, default to 24)</param>
        /// <param name="cursor">The cursor from which to return paginated results starting after (optional)</param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <returns>Object</returns>
        public Object ListProductVersions(string product, int? perPage = default(int?), string cursor = default(string), ProductVersionFilter filter = default(ProductVersionFilter))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<Object> localVarResponse = ListProductVersionsWithHttpInfo(product, perPage, cursor, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all versions for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="perPage"> (optional, default to 24)</param>
        /// <param name="cursor">The cursor from which to return paginated results starting after (optional)</param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse<Object> ListProductVersionsWithHttpInfo(string product, int? perPage = default(int?), string cursor = default(string), ProductVersionFilter filter = default(ProductVersionFilter))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->ListProductVersions");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("", "perPage", perPage));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/v3/products/{product}/versions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all versions for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="perPage"> (optional, default to 24)</param>
        /// <param name="cursor">The cursor from which to return paginated results starting after (optional)</param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ListProductVersionsAsync(string product, int? perPage = default(int?), string cursor = default(string), ProductVersionFilter filter = default(ProductVersionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<Object> localVarResponse = await ListProductVersionsWithHttpInfoAsync(product, perPage, cursor, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all versions for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="perPage"> (optional, default to 24)</param>
        /// <param name="cursor">The cursor from which to return paginated results starting after (optional)</param>
        /// <param name="filter">Filter the results (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<Object>> ListProductVersionsWithHttpInfoAsync(string product, int? perPage = default(int?), string cursor = default(string), ProductVersionFilter filter = default(ProductVersionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->ListProductVersions");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("", "perPage", perPage));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/v3/products/{product}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductVersions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="updateProductVersionPayload"> (optional)</param>
        /// <returns>UpdateProductVersionResponse</returns>
        public UpdateProductVersionResponse UpdateProductVersion(string product, string version, UpdateProductVersionPayload updateProductVersionPayload = default(UpdateProductVersionPayload))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<UpdateProductVersionResponse> localVarResponse = UpdateProductVersionWithHttpInfo(product, version, updateProductVersionPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="updateProductVersionPayload"> (optional)</param>
        /// <returns>ApiResponse of UpdateProductVersionResponse</returns>
        public Everyday.GmodStore.Sdk.Client.ApiResponse<UpdateProductVersionResponse> UpdateProductVersionWithHttpInfo(string product, string version, UpdateProductVersionPayload updateProductVersionPayload = default(UpdateProductVersionPayload))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->UpdateProductVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'version' when calling ProductVersionsApi->UpdateProductVersion");

            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = updateProductVersionPayload;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateProductVersionResponse>("/api/v3/products/{product}/versions/{version}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="updateProductVersionPayload"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateProductVersionResponse</returns>
        public async System.Threading.Tasks.Task<UpdateProductVersionResponse> UpdateProductVersionAsync(string product, string version, UpdateProductVersionPayload updateProductVersionPayload = default(UpdateProductVersionPayload), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Everyday.GmodStore.Sdk.Client.ApiResponse<UpdateProductVersionResponse> localVarResponse = await UpdateProductVersionWithHttpInfoAsync(product, version, updateProductVersionPayload, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the specified version for a product 
        /// </summary>
        /// <exception cref="Everyday.GmodStore.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="product"></param>
        /// <param name="version"></param>
        /// <param name="updateProductVersionPayload"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateProductVersionResponse)</returns>
        public async System.Threading.Tasks.Task<Everyday.GmodStore.Sdk.Client.ApiResponse<UpdateProductVersionResponse>> UpdateProductVersionWithHttpInfoAsync(string product, string version, UpdateProductVersionPayload updateProductVersionPayload = default(UpdateProductVersionPayload), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'product' is set
            if (product == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'product' when calling ProductVersionsApi->UpdateProductVersion");

            // verify the required parameter 'version' is set
            if (version == null)
                throw new Everyday.GmodStore.Sdk.Client.ApiException(400, "Missing required parameter 'version' when calling ProductVersionsApi->UpdateProductVersion");


            Everyday.GmodStore.Sdk.Client.RequestOptions localVarRequestOptions = new Everyday.GmodStore.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Everyday.GmodStore.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("product", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(product)); // path parameter
            localVarRequestOptions.PathParameters.Add("version", Everyday.GmodStore.Sdk.Client.ClientUtils.ParameterToString(version)); // path parameter
            localVarRequestOptions.Data = updateProductVersionPayload;

            // authentication (PersonalAccessToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateProductVersionResponse>("/api/v3/products/{product}/versions/{version}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductVersion", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
