/*
 * gmodstore
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Everyday.GmodStore.Sdk.Client.OpenAPIDateConverter;

namespace Everyday.GmodStore.Sdk.Model
{
    /// <summary>
    /// ProductVersion
    /// </summary>
    [DataContract(Name = "ProductVersion")]
    public partial class ProductVersion : IEquatable<ProductVersion>, IValidatableObject
    {
        /// <summary>
        /// Defines ReleaseType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReleaseTypeEnum
        {
            /// <summary>
            /// Enum Stable for value: stable
            /// </summary>
            [EnumMember(Value = "stable")]
            Stable = 1,

            /// <summary>
            /// Enum Beta for value: beta
            /// </summary>
            [EnumMember(Value = "beta")]
            Beta = 2,

            /// <summary>
            /// Enum Alpha for value: alpha
            /// </summary>
            [EnumMember(Value = "alpha")]
            Alpha = 3,

            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 4,

            /// <summary>
            /// Enum Demo for value: demo
            /// </summary>
            [EnumMember(Value = "demo")]
            Demo = 5

        }


        /// <summary>
        /// Gets or Sets ReleaseType
        /// </summary>
        [DataMember(Name = "releaseType", IsRequired = true, EmitDefaultValue = false)]
        public ReleaseTypeEnum ReleaseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductVersion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductVersion" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="changelog">changelog (required).</param>
        /// <param name="releaseType">releaseType (required).</param>
        /// <param name="fileSize">fileSize (required).</param>
        /// <param name="fileHash">fileHash (required).</param>
        public ProductVersion(Guid id = default(Guid), string name = default(string), string changelog = default(string), ReleaseTypeEnum releaseType = default(ReleaseTypeEnum), decimal fileSize = default(decimal), string fileHash = default(string))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null) {
                throw new ArgumentNullException("name is a required property for ProductVersion and cannot be null");
            }
            this.Name = name;
            // to ensure "changelog" is required (not null)
            if (changelog == null) {
                throw new ArgumentNullException("changelog is a required property for ProductVersion and cannot be null");
            }
            this.Changelog = changelog;
            this.ReleaseType = releaseType;
            this.FileSize = fileSize;
            // to ensure "fileHash" is required (not null)
            if (fileHash == null) {
                throw new ArgumentNullException("fileHash is a required property for ProductVersion and cannot be null");
            }
            this.FileHash = fileHash;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Changelog
        /// </summary>
        [DataMember(Name = "changelog", IsRequired = true, EmitDefaultValue = false)]
        public string Changelog { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name = "fileSize", IsRequired = true, EmitDefaultValue = false)]
        public decimal FileSize { get; set; }

        /// <summary>
        /// Gets or Sets FileHash
        /// </summary>
        [DataMember(Name = "fileHash", IsRequired = true, EmitDefaultValue = false)]
        public string FileHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductVersion {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  ReleaseType: ").Append(ReleaseType).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  FileHash: ").Append(FileHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductVersion);
        }

        /// <summary>
        /// Returns true if ProductVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductVersion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Changelog == input.Changelog ||
                    (this.Changelog != null &&
                    this.Changelog.Equals(input.Changelog))
                ) && 
                (
                    this.ReleaseType == input.ReleaseType ||
                    this.ReleaseType.Equals(input.ReleaseType)
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    this.FileSize.Equals(input.FileSize)
                ) && 
                (
                    this.FileHash == input.FileHash ||
                    (this.FileHash != null &&
                    this.FileHash.Equals(input.FileHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Changelog != null)
                    hashCode = hashCode * 59 + this.Changelog.GetHashCode();
                hashCode = hashCode * 59 + this.ReleaseType.GetHashCode();
                hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileHash != null)
                    hashCode = hashCode * 59 + this.FileHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // FileSize (decimal) minimum
            if(this.FileSize < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FileSize, must be a value greater than or equal to 0.", new [] { "FileSize" });
            }

            yield break;
        }
    }

}
