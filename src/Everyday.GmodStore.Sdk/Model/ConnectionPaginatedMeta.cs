/*
 * gmodstore
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Everyday.GmodStore.Sdk.Client.OpenAPIDateConverter;

namespace Everyday.GmodStore.Sdk.Model
{
    /// <summary>
    /// ConnectionPaginatedMeta
    /// </summary>
    [DataContract(Name = "ConnectionPaginated_meta")]
    public partial class ConnectionPaginatedMeta : IEquatable<ConnectionPaginatedMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionPaginatedMeta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConnectionPaginatedMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionPaginatedMeta" /> class.
        /// </summary>
        /// <param name="perPage">perPage (required).</param>
        public ConnectionPaginatedMeta(long perPage = default(long))
        {
            this.PerPage = perPage;
        }

        /// <summary>
        /// Gets or Sets PerPage
        /// </summary>
        [DataMember(Name = "perPage", IsRequired = true, EmitDefaultValue = false)]
        public long PerPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectionPaginatedMeta {\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectionPaginatedMeta);
        }

        /// <summary>
        /// Returns true if ConnectionPaginatedMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectionPaginatedMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectionPaginatedMeta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PerPage == input.PerPage ||
                    this.PerPage.Equals(input.PerPage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PerPage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
