/*
 * GmodStore API
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Everyday.GmodStore.Sdk.Client.OpenAPIDateConverter;

namespace Everyday.GmodStore.Sdk.Model
{
    /// <summary>
    /// AddonCoupon
    /// </summary>
    [DataContract(Name = "AddonCoupon")]
    public partial class AddonCoupon : IEquatable<AddonCoupon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCoupon" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddonCoupon() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddonCoupon" /> class.
        /// </summary>
        /// <param name="code">code (required).</param>
        /// <param name="percent">percent (required).</param>
        /// <param name="maxUses">maxUses (required).</param>
        /// <param name="expiresAt">A future date less than 2 weeks from today (required).</param>
        /// <param name="boundUserId">boundUserId.</param>
        /// <param name="addon">addon.</param>
        /// <param name="boundUser">boundUser.</param>
        public AddonCoupon(string code = default(string), decimal percent = default(decimal), int maxUses = default(int), DateTime expiresAt = default(DateTime), long? boundUserId = default(long?), Addon addon = default(Addon), User boundUser = default(User))
        {
            // to ensure "code" is required (not null)
            if (code == null) {
                throw new ArgumentNullException("code is a required property for AddonCoupon and cannot be null");
            }
            this.Code = code;
            this.Percent = percent;
            this.MaxUses = maxUses;
            this.ExpiresAt = expiresAt;
            this.BoundUserId = boundUserId;
            this.Addon = addon;
            this.BoundUser = boundUser;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public long Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Percent
        /// </summary>
        [DataMember(Name = "percent", IsRequired = true, EmitDefaultValue = false)]
        public decimal Percent { get; set; }

        /// <summary>
        /// Gets or Sets MaxUses
        /// </summary>
        [DataMember(Name = "max_uses", IsRequired = true, EmitDefaultValue = false)]
        public int MaxUses { get; set; }

        /// <summary>
        /// A future date less than 2 weeks from today
        /// </summary>
        /// <value>A future date less than 2 weeks from today</value>
        [DataMember(Name = "expires_at", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets BoundUserId
        /// </summary>
        [DataMember(Name = "bound_user_id", EmitDefaultValue = true)]
        public long? BoundUserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Addon
        /// </summary>
        [DataMember(Name = "addon", EmitDefaultValue = false)]
        public Addon Addon { get; set; }

        /// <summary>
        /// Gets or Sets BoundUser
        /// </summary>
        [DataMember(Name = "bound_user", EmitDefaultValue = false)]
        public User BoundUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddonCoupon {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  MaxUses: ").Append(MaxUses).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  BoundUserId: ").Append(BoundUserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Addon: ").Append(Addon).Append("\n");
            sb.Append("  BoundUser: ").Append(BoundUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddonCoupon);
        }

        /// <summary>
        /// Returns true if AddonCoupon instances are equal
        /// </summary>
        /// <param name="input">Instance of AddonCoupon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddonCoupon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Percent == input.Percent ||
                    this.Percent.Equals(input.Percent)
                ) && 
                (
                    this.MaxUses == input.MaxUses ||
                    this.MaxUses.Equals(input.MaxUses)
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.BoundUserId == input.BoundUserId ||
                    (this.BoundUserId != null &&
                    this.BoundUserId.Equals(input.BoundUserId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Addon == input.Addon ||
                    (this.Addon != null &&
                    this.Addon.Equals(input.Addon))
                ) && 
                (
                    this.BoundUser == input.BoundUser ||
                    (this.BoundUser != null &&
                    this.BoundUser.Equals(input.BoundUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                hashCode = hashCode * 59 + this.Percent.GetHashCode();
                hashCode = hashCode * 59 + this.MaxUses.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.BoundUserId != null)
                    hashCode = hashCode * 59 + this.BoundUserId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.Addon != null)
                    hashCode = hashCode * 59 + this.Addon.GetHashCode();
                if (this.BoundUser != null)
                    hashCode = hashCode * 59 + this.BoundUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Id (long) minimum
            if(this.Id < (long)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, must be a value greater than or equal to 1.", new [] { "Id" });
            }

            // Percent (decimal) maximum
            if(this.Percent > (decimal)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Percent, must be a value less than or equal to 99.", new [] { "Percent" });
            }

            // Percent (decimal) minimum
            if(this.Percent < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Percent, must be a value greater than or equal to 1.", new [] { "Percent" });
            }

            // MaxUses (int) minimum
            if(this.MaxUses < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxUses, must be a value greater than or equal to 1.", new [] { "MaxUses" });
            }

            yield break;
        }
    }

}
