/*
 * GmodStore API
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Everyday.GmodStore.Sdk.Client.OpenAPIDateConverter;

namespace Everyday.GmodStore.Sdk.Model
{
/// <summary>
/// PermissionGroup
/// </summary>
[DataContract]
public partial class PermissionGroup :  IEquatable<PermissionGroup>, IValidatableObject
{
/// <summary>
/// Initializes a new instance of the <see cref="PermissionGroup" /> class.
/// </summary>
/// <param name="id">id.</param>
/// <param name="title">title.</param>
/// <param name="displayOrder">displayOrder.</param>
public PermissionGroup(int id = default(int), string title = default(string), int displayOrder = default(int))
{
	this.Id = id;
	this.Title = title;
	this.DisplayOrder = displayOrder;
}

/// <summary>
/// Gets or Sets Id
/// </summary>
[DataMember(Name="id", EmitDefaultValue=false)]
public int Id {
	get; set;
}

/// <summary>
/// Gets or Sets Title
/// </summary>
[DataMember(Name="title", EmitDefaultValue=false)]
public string Title {
	get; set;
}

/// <summary>
/// Gets or Sets DisplayOrder
/// </summary>
[DataMember(Name="display_order", EmitDefaultValue=false)]
public int DisplayOrder {
	get; set;
}

/// <summary>
/// Returns the string presentation of the object
/// </summary>
/// <returns>String presentation of the object</returns>
public override string ToString()
{
	var sb = new StringBuilder();
	sb.Append("class PermissionGroup {\n");
	sb.Append("  Id: ").Append(Id).Append("\n");
	sb.Append("  Title: ").Append(Title).Append("\n");
	sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
	sb.Append("}\n");
	return sb.ToString();
}

/// <summary>
/// Returns the JSON string presentation of the object
/// </summary>
/// <returns>JSON string presentation of the object</returns>
public virtual string ToJson()
{
	return JsonConvert.SerializeObject(this, Formatting.Indented);
}

/// <summary>
/// Returns true if objects are equal
/// </summary>
/// <param name="input">Object to be compared</param>
/// <returns>Boolean</returns>
public override bool Equals(object input)
{
	return this.Equals(input as PermissionGroup);
}

/// <summary>
/// Returns true if PermissionGroup instances are equal
/// </summary>
/// <param name="input">Instance of PermissionGroup to be compared</param>
/// <returns>Boolean</returns>
public bool Equals(PermissionGroup input)
{
	if (input == null)
		return false;

	return
		(
		this.Id == input.Id ||
		this.Id.Equals(input.Id)
	        ) &&
		(
		this.Title == input.Title ||
		(this.Title != null &&
		 this.Title.Equals(input.Title))
	        ) &&
		(
		this.DisplayOrder == input.DisplayOrder ||
		this.DisplayOrder.Equals(input.DisplayOrder)
	        );
}

/// <summary>
/// Gets the hash code
/// </summary>
/// <returns>Hash code</returns>
public override int GetHashCode()
{
	unchecked     // Overflow is fine, just wrap
	{
		int hashCode = 41;
		hashCode = hashCode * 59 + this.Id.GetHashCode();
		if (this.Title != null)
			hashCode = hashCode * 59 + this.Title.GetHashCode();
		hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
		return hashCode;
	}
}

/// <summary>
/// To validate all properties of the instance
/// </summary>
/// <param name="validationContext">Validation context</param>
/// <returns>Validation Result</returns>
IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
{
	yield break;
}
}

}
