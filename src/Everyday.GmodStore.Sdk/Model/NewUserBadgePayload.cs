/*
 * gmodstore
 *
 * Welcome to the GmodStore API! You can use our API to access GmodStore API endpoints, which can be used interact with GmodStore programmatically.  # Rate limits Every request you make to the GmodStore API will count against your rate limit, which at the time of writing this, is 60 requests / minute. An up-to-date value will always provided in the `X-RateLimit-Limit` header The number of requests you have remaining before you must wait is provided in the `X-RateLimit-Remaining` header.  # API SDKs For a list of available API SDKs check the README here: https://github.com/everyday-as/gmodstore-api-docs#client-libraries
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Everyday.GmodStore.Sdk.Client.OpenAPIDateConverter;

namespace Everyday.GmodStore.Sdk.Model
{
    /// <summary>
    /// NewUserBadgePayload
    /// </summary>
    [DataContract(Name = "NewUserBadgePayload")]
    public partial class NewUserBadgePayload : IEquatable<NewUserBadgePayload>, IValidatableObject
    {
        /// <summary>
        /// Defines BadgeId
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BadgeIdEnum
        {
            /// <summary>
            /// Enum _2fa for value: 2fa
            /// </summary>
            [EnumMember(Value = "2fa")]
            _2fa = 1,

            /// <summary>
            /// Enum AddonSubmit for value: addon-submit
            /// </summary>
            [EnumMember(Value = "addon-submit")]
            AddonSubmit = 2,

            /// <summary>
            /// Enum ForumPost for value: forum-post
            /// </summary>
            [EnumMember(Value = "forum-post")]
            ForumPost = 3,

            /// <summary>
            /// Enum Beta for value: beta
            /// </summary>
            [EnumMember(Value = "beta")]
            Beta = 4,

            /// <summary>
            /// Enum FirstPurchase for value: first-purchase
            /// </summary>
            [EnumMember(Value = "first-purchase")]
            FirstPurchase = 5,

            /// <summary>
            /// Enum ReceivedMessage for value: received-message
            /// </summary>
            [EnumMember(Value = "received-message")]
            ReceivedMessage = 6,

            /// <summary>
            /// Enum Coal for value: coal
            /// </summary>
            [EnumMember(Value = "coal")]
            Coal = 7,

            /// <summary>
            /// Enum Contribution for value: contribution
            /// </summary>
            [EnumMember(Value = "contribution")]
            Contribution = 8,

            /// <summary>
            /// Enum Developer for value: developer
            /// </summary>
            [EnumMember(Value = "developer")]
            Developer = 9,

            /// <summary>
            /// Enum DiscordBooster for value: discord-booster
            /// </summary>
            [EnumMember(Value = "discord-booster")]
            DiscordBooster = 10,

            /// <summary>
            /// Enum Download for value: download
            /// </summary>
            [EnumMember(Value = "download")]
            Download = 11,

            /// <summary>
            /// Enum Job for value: job
            /// </summary>
            [EnumMember(Value = "job")]
            Job = 12,

            /// <summary>
            /// Enum Featured for value: featured
            /// </summary>
            [EnumMember(Value = "featured")]
            Featured = 13,

            /// <summary>
            /// Enum Sponsor for value: sponsor
            /// </summary>
            [EnumMember(Value = "sponsor")]
            Sponsor = 14,

            /// <summary>
            /// Enum Kawaii for value: kawaii
            /// </summary>
            [EnumMember(Value = "kawaii")]
            Kawaii = 15,

            /// <summary>
            /// Enum Crown for value: crown
            /// </summary>
            [EnumMember(Value = "crown")]
            Crown = 16,

            /// <summary>
            /// Enum Favourites for value: favourites
            /// </summary>
            [EnumMember(Value = "favourites")]
            Favourites = 17,

            /// <summary>
            /// Enum Shiba for value: shiba
            /// </summary>
            [EnumMember(Value = "shiba")]
            Shiba = 18,

            /// <summary>
            /// Enum Negotiated for value: negotiated
            /// </summary>
            [EnumMember(Value = "negotiated")]
            Negotiated = 19,

            /// <summary>
            /// Enum Pug for value: pug
            /// </summary>
            [EnumMember(Value = "pug")]
            Pug = 20,

            /// <summary>
            /// Enum ExStaff for value: ex-staff
            /// </summary>
            [EnumMember(Value = "ex-staff")]
            ExStaff = 21,

            /// <summary>
            /// Enum Aspiring for value: aspiring
            /// </summary>
            [EnumMember(Value = "aspiring")]
            Aspiring = 22,

            /// <summary>
            /// Enum Staff for value: staff
            /// </summary>
            [EnumMember(Value = "staff")]
            Staff = 23,

            /// <summary>
            /// Enum Push for value: push
            /// </summary>
            [EnumMember(Value = "push")]
            Push = 24,

            /// <summary>
            /// Enum Bought for value: bought
            /// </summary>
            [EnumMember(Value = "bought")]
            Bought = 25

        }


        /// <summary>
        /// Gets or Sets BadgeId
        /// </summary>
        [DataMember(Name = "badge_id", IsRequired = true, EmitDefaultValue = false)]
        public BadgeIdEnum BadgeId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewUserBadgePayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewUserBadgePayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewUserBadgePayload" /> class.
        /// </summary>
        /// <param name="badgeId">badgeId (required).</param>
        public NewUserBadgePayload(BadgeIdEnum badgeId = default(BadgeIdEnum))
        {
            this.BadgeId = badgeId;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewUserBadgePayload {\n");
            sb.Append("  BadgeId: ").Append(BadgeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewUserBadgePayload);
        }

        /// <summary>
        /// Returns true if NewUserBadgePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of NewUserBadgePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewUserBadgePayload input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BadgeId == input.BadgeId ||
                    this.BadgeId.Equals(input.BadgeId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.BadgeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
